[
  {
    "name": "hb-ejs",
    "description": "A Harp Boilerplate.",
    "url": "https://github.com/marcomontalbano/hb-ejs",
    "homepageUrl": null,
    "createdAt": "2015-10-29T13:23:15Z",
    "updatedAt": "2018-04-09T17:38:53Z",
    "pushedAt": "2016-10-06T08:35:35Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 3
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": []
    },
    "customFields": {
      "title": "Harp Boilerplate • ejs",
      "visible": false,
      "starCount": 3,
      "forkCount": 0,
      "repositoryTopics": [],
      "cover": {
        "url": "https://github.com/marcomontalbano/hb-ejs/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/hb-ejs/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Harp Boilerplate • ejs\n======================\n\nA Harp boilerplate that uses `.ejs` instead of `.jade`.\n\nIt also include a test suite with Jasmine.\n\n\nGet started\n-----------\n\nHarp is the static web server with built-in preprocessing. [Get started with Harp](http://harpjs.com/docs/quick-start).\n\n```sh\n# install harp\nsudo npm install -g harp\n\n# then initialize the boilerplate\nharp init -b marcomontalbano/hb-ejs myproject\n\n# run server\nharp server myproject\n```\n\nNow visit [localhost:9000](http://localhost:9000) in your browser.\n\n\n\nFull installation\n-----------------\n\n```sh\n# install needed packages\nsudo npm install -g harp\n#sudo npm install -g bower\nsudo npm install -g gulp\n\n# then initialize the boilerplate\nharp init -b marcomontalbano/hb-ejs myproject\ncd myproject\n\n# install dependencies\nnpm install\n#bower install\n\n# run tests\ngulp test\n\n# run server\nharp server\n\n```\n\n\nFurther Reading\n---------------\n\n### Node.js\n\nNode.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.\nNode.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.\nNode.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n\nNode.js can be downloaded for Windows, Mac and Linux at [nodejs.org/en/download/](https://nodejs.org/en/download/).\n\n> [nodejs.org](https://nodejs.org/)\n\n### Bower\n\n**At the moment Bower doesn't work with the command `harp compile`. Do not use it.**\n\nWeb sites are made of lots of things — frameworks, libraries, assets, utilities, and rainbows. Bower manages all these things for you.\n\n> [bower.io](http://bower.io/)\n\n##### Getting started with Bower\n\n```sh\nsudo npm install -g bower\n```\n\nBower is useful to load 3rd party libraries like jQuery, AngularJS and every other frontend frameworks.\n\n`jQuery` and `uikit` are imported in this boilerplate just for the demo.\nYou are free to use your prefered framework changing the configuration in `bower.json`.\n\nAfter done it just run:\n\n```sh\nbower install\n```\n\n### gulp.js\n\nGulp is a task runner which uses Node.js.\n\nI have chosen `gulp` instead of `Grunt`. Some reasons are clearly explained [here](http://slides.com/contra/gulp#).\n\n> [gulpjs.com](http://gulpjs.com/)\n\n##### Getting started with gulp.js\n\nGulp is used in this boilerplate for testing reasons.\n\nIf you don't want to test your javascript code (you should do it), just do not install it.\n\n```sh\nsudo npm install -g gulp\n\ngulp test\n```\n\n\nLicense\n-------\n\n[The MIT License (MIT)](https://github.com/marcomontalbano/hb-ejs/raw/master/LICENSE.md)\n\nCopyright © [Marco Montalbano](https://marcomontalbano.com)\n"
      }
    }
  },
  {
    "name": "kata.rb",
    "description": "A collection of katas with Ruby.",
    "url": "https://github.com/marcomontalbano/kata.rb",
    "homepageUrl": "",
    "createdAt": "2016-02-03T17:58:34Z",
    "updatedAt": "2020-03-04T21:10:06Z",
    "pushedAt": "2020-03-04T21:10:03Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "ruby"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "kata"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "TOC",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "repositoryTopics": [
        "ruby",
        "kata"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/kata.rb/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/kata.rb/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "[![Build Status](https://travis-ci.org/marcomontalbano/kata.rb.svg?branch=master)](https://travis-ci.org/marcomontalbano/kata.rb)\n\n\nTOC\n===\n\n* Ruby Tip & Tricks\n* FizzBuzz\n* Bowling\n\n\nHow to configure\n----------------\n\nMake sure you have the latest RVM:\n\n`rvm get stable`\n\nJust run this in your favorite terminal after installing RVM:\n\n`rvm install ruby-2.4`\n\nCreate a new gemset and use it:\n\n`rvm use @tdd --create`\n\nGet gemset list:\n\n`rvm gemset list`\n\nInstall bundler:\n\n`gem install bundler`\n\nInstall gems:\n\n`bundle install`\n\nExecute tasks:\n\n`bundle exec rake`\n\n\nHow to test\n-----------\n\n`rspec spec`\n\n\nHow to play\n-----------\n\n`ruby main.rb`\n"
      }
    }
  },
  {
    "name": "jquery-jcreate",
    "description": "jCreate is a new special event for jQuery. Just use .on('create', ..); the callback will be triggered when elements are created on the page.",
    "url": "https://github.com/marcomontalbano/jquery-jcreate",
    "homepageUrl": "https://marcomontalbano.com/portfolio/3/jcreate",
    "createdAt": "2016-03-10T13:08:21Z",
    "updatedAt": "2020-04-08T09:45:25Z",
    "pushedAt": "2020-04-08T09:45:23Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 10
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "oncreate"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jquery"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "create"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "event"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jasmine"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "unit-testing"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "jCreate",
      "visible": true,
      "starCount": 10,
      "forkCount": 0,
      "repositoryTopics": [
        "oncreate",
        "jquery",
        "create",
        "event",
        "jasmine",
        "unit-testing"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/jquery-jcreate/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/jquery-jcreate/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "jCreate\r\n=======\r\n\r\n[![Codacy](https://api.codacy.com/project/badge/Grade/16809335d05c4b82b5e656de74875ea9)](https://www.codacy.com/app/marcomontalbano/jquery-jcreate)\r\n[![Build Status](https://travis-ci.org/marcomontalbano/jquery-jcreate.svg?branch=master)](https://travis-ci.org/marcomontalbano/jquery-jcreate)\r\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/jquery-jcreate/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/jquery-jcreate?branch=master)\r\n[![Release Notes](https://img.shields.io/github/release/marcomontalbano/jquery-jcreate.svg)](https://github.com/marcomontalbano/jquery-jcreate/releases)\r\n\r\njCreate is a plugin for jQuery that adds a new bindable event. Did you ever look for something like `$(document).on(\"create\", function() { ... });`?\r\n\r\nNow you can do something cool when one or more elements are created and are available on the page.\r\n\r\nSee it in action with [CodePen].\r\n\r\n\r\nInstall\r\n-------\r\n\r\n### Yarn and npm\r\n\r\n[![NPM](https://nodei.co/npm/jquery-jcreate.png)](https://nodei.co/npm/jquery-jcreate/)\r\n\r\nYou can install jCreate using [Yarn] or [npm]:\r\n\r\n```sh\r\n# yarn\r\nyarn add jquery-jcreate\r\n\r\n# npm\r\nnpm install --save jquery-jcreate\r\n```\r\n\r\n#### Webpack 2\r\n\r\n```js\r\nimport $ from 'jquery';\r\nimport 'jquery-jcreate';\r\n\r\n$(document).on('create', '*', function(event) {\r\n    console.log( 'created tag: ', event.$currentTarget.prop('tagName') );\r\n});\r\n```\r\n\r\n#### RequireJS\r\n\r\n```js\r\ndefine([\"jquery\", \"jquery-jcreate\"], function( $ ) {\r\n\r\n    $(document).on('create', '*', function(event) {\r\n        console.log( 'created tag: ', event.$currentTarget.prop('tagName') );\r\n    });\r\n});\r\n```\r\n\r\n### Bower\r\n\r\nYou can install jCreate using [Bower]:\r\n\r\n```sh\r\nbower install --save jquery-jcreate\r\n```\r\n\r\nAnd now you can include it in you project with a `<script>` tag.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"https://github.com/marcomontalbano/jquery-jcreate/raw/master/jquery.jcreate.min.js\"></script>\r\n```\r\n\r\n### `<script>` tag using CDNs\r\n\r\n[jsDelivr] is a global CDN delivery for JavaScript libraries.\r\n\r\nTo include the latest releases and all upcoming features and patches, use this:\r\n\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/jquery-jcreate@1/dist/jquery.jcreate.min.js\"></script>\r\n```\r\n\r\nHow to use\r\n----------\r\n\r\njCreate works with the [jQuery Event Delegation].\r\n\r\n```js\r\n// bind 'create' event.\r\n$( '#dataTable tbody' ).on( 'create', 'tr', function( event ) {\r\n    console.log( event.$currentTarget.text() );\r\n});\r\n\r\n// add a new 'row'.\r\n$( '#dataTable tbody' ).append('<tr><td>this is a new row!</td></tr>');\r\n```\r\n\r\n### Event\r\n\r\n* **type** - Describes the nature of the event.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.type ); //= \"create\"\r\n});\r\n```\r\n\r\n* **timeStamp** - The difference in milliseconds between the time the browser created the event and January 1, 1970.\r\n\r\n* **currentTarget** - The current DOM element within the event bubbling phase.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.currentTarget === this ); //= true\r\n});\r\n```\r\n\r\n* **$currentTarget** - The current DOM element within the event bubbling phase as jQuery object.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.$currentTarget.is( $(this) ) ); //= true\r\n});\r\n```\r\n\r\n* **delegateTarget** - The element where the currently-called jQuery event handler was attached.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.delegateTarget === document ); //= true\r\n});\r\n```\r\n\r\n* **$delegateTarget** - The jQuery element where the currently-called jQuery event handler was attached.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.$delegateTarget.is( $(document) ) ); //= true\r\n});\r\n```\r\n\r\n* **options** - Method that filters data by key.\r\n```html\r\n<div data-component-name=\"hello-world\"></div>\r\n```\r\n```javascript\r\n$( document ).on('create', 'div', function( event ) {\r\n    console.log( event.options('component') ); //= {name:\"hello-world\"}\r\n});\r\n```\r\n\r\n### jQuery Support\r\n\r\n> jquery >= 1.8\r\n\r\nSince I use the last version of `jasmine-jquery` library in order to test my own plugin, I cannot ensure that the plugin works with jQuery 1.7 and below, due to the fact that `jasmine-jquery` uses methods that were introduced in jQuery 1.8.\r\n\r\n\r\nThe Module Pattern\r\n------------------\r\n\r\n> _Modules are an integral piece of any robust application's architecture and typically help in keeping the units of code for a project both cleanly separated and organized._\r\n>\r\n> [Learning JavaScript Design Patterns - Addy Osmani]\r\n\r\n```javascript\r\nvar myModule = (function () {\r\n\r\n    var   module           = {}\r\n        , _privateVariable = 'Hello World'\r\n    ;\r\n\r\n    var _privateMethod = function() {\r\n        return _privateVariable;\r\n    };\r\n\r\n    module.publicProperty = 'Foobar';\r\n    module.publicMethod = function () {\r\n        console.log( _privateMethod() );\r\n    };\r\n\r\n    return module;\r\n\r\n}());\r\n```\r\n\r\nHere follows a simple example on how to use the Module pattern with jCreate.\r\n\r\n```html\r\n<div data-component=\"hello-world\" data-hello-world-name=\"Marco\"></div>\r\n```\r\n\r\n```javascript\r\nvar helloWorldComponent = (function () {\r\n\r\n    var   module         = {}\r\n        , _componentName = 'hello-world'\r\n    ;\r\n\r\n    module.greeting = function( name ) {\r\n        console.log( 'Hello ' + name + '!' );\r\n    };\r\n\r\n    $(document).on('create', '[data-component~=\"' + _componentName + '\"]', function( event ) {\r\n        var options = event.options( _componentName ); //= {name:\"Marco\"}\r\n        module.greeting( options.name );               //= Hello Marco!\r\n    });\r\n\r\n    return module;\r\n}());\r\n\r\nhelloWorldComponent.greeting('Marco'); //= Hello Marco!\r\n```\r\n\r\n\r\nDevelopment\r\n-----------\r\n\r\n### Install Grunt and Bower\r\n\r\nTo install Grunt and Bower, you must first download and install [node.js] - which includes npm.\r\n\r\nThen, using the command line:\r\n\r\n```sh\r\n# install `grunt-cli` globally\r\nnpm install -g grunt-cli\r\n\r\n# install `bower` globally\r\nnpm install -g bower\r\n\r\n# navigate to the root of your project, then run\r\nnpm install\r\nbower install\r\n```\r\n\r\n\r\n### Available tasks\r\n\r\n* `npm start`  Start http server.\r\n* `npm run test`   Validate files with [JSHint] and run unit tests with [jasmine].\r\n* `npm run smoke`  Watch for file changes and run smoke test.\r\n* `npm run build`  Run full test suite and build dist folder.\r\n\r\n\r\n[Bower]: <http://bower.io/>\r\n[jsDelivr]: <https://www.jsdelivr.com/about>\r\n[jQuery Event Delegation]: <http://api.jquery.com/on/#direct-and-delegated-events>\r\n[node.js]: <https://nodejs.org/>\r\n[CodePen]: <https://codepen.io/collection/AQGNYy/>\r\n[download and install node.js]: <https://nodejs.org/>\r\n\r\n[Learning JavaScript Design Patterns - Addy Osmani]: <https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript>\r\n\r\n[JSHint]:   <https://www.npmjs.com/package/grunt-contrib-jshint>\r\n[jasmine]:  <https://www.npmjs.com/package/grunt-contrib-jasmine>\r\n[UglifyJS]: <https://www.npmjs.com/package/grunt-contrib-uglify>\r\n\r\n[npm]: <https://www.npmjs.com/>\r\n[Yarn]: <https://yarnpkg.com/lang/en/>\r\n"
      }
    }
  },
  {
    "name": "kata.js",
    "description": "A collection of katas with JavaScript.",
    "url": "https://github.com/marcomontalbano/kata.js",
    "homepageUrl": "https://marcomontalbano.com/portfolio/5/testdriven-development-with-jasmine-how-to",
    "createdAt": "2016-03-25T08:26:30Z",
    "updatedAt": "2020-03-20T20:08:57Z",
    "pushedAt": "2020-03-20T20:08:55Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "kata"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "tdd"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "test"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coverage"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nyc"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "istanbul"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-actions"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jasmine"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "chai"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "sinon"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "stryker"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Test-Driven Development with Mocha: How to",
      "visible": true,
      "starCount": 1,
      "forkCount": 1,
      "repositoryTopics": [
        "kata",
        "tdd",
        "test",
        "travis-ci",
        "coverage",
        "nyc",
        "istanbul",
        "github-actions",
        "jasmine",
        "mocha",
        "chai",
        "sinon",
        "stryker"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/kata.js/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/kata.js/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "[![Build Status](https://github.com/marcomontalbano/kata.js/workflows/Node%20CI/badge.svg)](https://github.com/marcomontalbano/kata.js)\r\n[![Build Status](https://travis-ci.org/marcomontalbano/kata.js.svg?branch=master)](https://travis-ci.org/marcomontalbano/kata.js)\r\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/kata.js/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/kata.js?branch=master)\r\n\r\n\r\nTest-Driven Development with Mocha: How to\r\n============================================\r\n\r\nA [code kata](https://en.wikipedia.org/wiki/Kata_(programming)) is an exercise in programming which helps a programmer hone their skills through practice and repetition.\r\n\r\nThe term was probably first coined by [Dave Thomas](https://en.wikipedia.org/wiki/Dave_Thomas_(programmer)), co-author of the book [The Pragmatic Programmer](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer), in a bow to the Japanese concept of kata in the martial arts.\r\n\r\n\r\n## Katas\r\n\r\n* Sound Player\r\n* Hello World\r\n* FizzBuzz\r\n* Rock Paper Scissors\r\n* Primes\r\n\r\n\r\n## Setup\r\n\r\nAll project dependencies are installed and managed via npm, the [Node.js](http://nodejs.org) package manager.\r\n\r\n```sh\r\nnpm install\r\nnpm test\r\n```\r\n\r\nAlternatively you can use [Yarn](https://yarnpkg.com/lang/en/).\r\n\r\n```sh\r\nyarn\r\nyarn test\r\n```\r\n\r\n\r\n## Continuous Integration with travis-ci.org\r\n\r\n[Travis CI](https://travis-ci.org/) is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.\r\n\r\nIn order to use Travis CI with your JavaScript projects you must use output on console instead of the html.\r\n\r\n* Click on `+` sign to add new repository.\r\n* Login with your Github credentials.\r\n* Select the repository.\r\n* Update your `package.json` adding:\r\n\r\n```json\r\n\"scripts\": {\r\n  \"test\": \"mocha ./**/*.spec.js\"\r\n},\r\n```\r\n\r\n* Add a `.travis.yml` file to your repository to tell Travis CI what to build:\r\n\r\n```yaml\r\nlanguage: node_js\r\nnode_js:\r\n  - \"10\"\r\n\r\n```\r\n\r\n* *note*: `npm install` and `npm test` are automatically executed by Travis CI.\r\n* Commit and push your changes.\r\n\r\nThat's it!\r\n\r\n\r\n## Test-driven development\r\n\r\nTest-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle:\r\n\r\n* first the developer writes an (initially failing) automated test case that defines a desired improvement or new function.\r\n* then produces the minimum amount of code to pass that test.\r\n* finally refactors the new code to acceptable standards.\r\n\r\n### Toolkit\r\n\r\n[Mocha](https://mochajs.org/) is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.\r\n\r\n[Chai](https://www.chaijs.com/) is a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.\r\n\r\n[Sinon](https://sinonjs.org/) is a standalone test spies, stubs and mocks for JavaScript. Works with any unit testing framework.\r\n\r\n[Istanbul](https://istanbul.js.org/) instruments your ES5 and ES2015+ JavaScript code with line counters, so that you can track how well your unit-tests exercise your codebase.\r\nThe [nyc](https://github.com/istanbuljs/nyc) command-line-client for Istanbul works well with most JavaScript testing frameworks: tap, mocha, AVA, etc.\r\n\r\n[Stryker](https://stryker-mutator.io/) uses one design mentality to implement mutation testing. It's easy to use and fast to run. Stryker will only mutate your source code, making sure there are no false positives.\r\n\r\n### Example\r\n\r\nFollowing an example of Test-Driven Development using Mocha and Chai for the most famous application: **`Hello World`**!\r\n\r\nSetup is easy, just run an `npm` command and change few lines into your `package.json`.\r\n\r\n```sh\r\nnpm install -D mocha chai\r\n```\r\n\r\n```json\r\n\"scripts\": {\r\n  \"test\": \"mocha ./**/*.spec.js\"\r\n},\r\n```\r\n\r\nNow you are able to run unit tests with `npm test`.\r\n\r\n> If you want to use ES6 syntax with import/export you will need `babel` also. To understand more about it, you can checkout this project, I'm using it :smile:\r\n\r\nFirst of all we should create a new file `HelloWorld.spec.js`.\r\n\r\nNow we can start writing our first test.\r\n\r\n```js\r\n//- HelloWorldSpec.js\r\n\r\nconst expect = require('chai').expect;\r\nconst HelloWorld = require('./HelloWorld');\r\n\r\ndescribe('HelloWorld', () => {\r\n  it('should exist.', () => {\r\n    // given\r\n    new HelloWorld();\r\n  });\r\n});\r\n\r\n```\r\n:exclamation: **RED** - Try running test and it will fail.\r\n\r\n---\r\n\r\nCreate a new file `HelloWorld.js`.\r\n\r\nThe next step is writing some code that would cause the test to pass.\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nfunction HelloWorld() {\r\n}\r\n\r\nmodule.exports = HelloWorld;\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n---\r\n\r\n:grey_question: **Need for refactoring?**\r\n\r\n---\r\n\r\nWe have a green bar! Now we can write a new test.\r\n\r\n```js\r\n//- HelloWorld.spec.js\r\n\r\n...\r\n\r\n  it('should greet() correcly.', () => {\r\n    // given\r\n    const helloWorld = new HelloWorld();\r\n\r\n    // then\r\n    expect(helloWorld.greet()).to.equal('Hello world');\r\n  });\r\n\r\n...\r\n```\r\n\r\n:exclamation: **RED** - Try running test and it will fail.\r\n\r\n---\r\n\r\nNow we can write some code that would cause the test to pass.\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\n...\r\n\r\nHelloWorld.prototype.greet = function () {\r\n  return 'Hello world';\r\n};\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n---\r\n\r\n:grey_question: **Need for refactoring?**\r\n\r\n---\r\n\r\n:tada: **Done**\r\n\r\n---\r\n\r\n**SPEC** - HelloWorld.spec.js\r\n\r\n```js\r\n//- HelloWorld.spec.js\r\n\r\nconst expect = require('chai').expect;\r\nconst HelloWorld = require('./HelloWorld');\r\n\r\ndescribe('HelloWorld', () => {\r\n\r\n  it('should exist.', () => {\r\n    // given\r\n    new HelloWorld();\r\n  });\r\n\r\n  it('should greet() correcly.', () => {\r\n    // given\r\n    const helloWorld = new HelloWorld();\r\n\r\n    // then\r\n    expect(helloWorld.greet()).to.equal('Hello world');\r\n  });\r\n\r\n});\r\n```\r\n\r\n**SRC** - HelloWorld.js\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nfunction HelloWorld() {\r\n}\r\n\r\nHelloWorld.prototype.greet = function () {\r\n  return 'Hello world';\r\n};\r\n\r\nmodule.exports = HelloWorld;\r\n```\r\n\r\n---\r\n\r\nNow if we decide to refactor the application moving from `prototype` to `class`, we can do it without fear.\r\n\r\nSo, let's do this :sunglasses:\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nmodule.exports = class {\r\n  greet() {\r\n    return 'Hello world';\r\n  }\r\n}\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n\r\n## Further readings\r\n\r\n* [Test Driven Development: By Example](https://www.amazon.it/gp/product/0321146530/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=0321146530&linkId=1ca1dd6ac49f36bde8d8873e0c219592) (Kent Beck) - Addison-Wesley\r\n* [JavaScript Testing with Jasmine](https://www.amazon.it/gp/product/B00C10Y9BS/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=B00C10Y9BS&linkId=09b0ff07e7fdfff34479e6b75c6c0de6) (Evan Hahn) - O'Reilly Media\r\n* [Jasmine JavaScript Testing](https://www.amazon.it/gp/product/B00ESX15MW/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=B00ESX15MW&linkId=56d03cf6deae504b4eef80075e3be7fb) (Paulo Ragonha) - Packt Publishing\r\n* [JavaScript Unit Testing](https://www.amazon.it/gp/product/1782160620/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=1782160620&linkId=9389d2655483038a950339ca11a7035c) (Hazem Saleh) - Packt Publishing\r\n"
      }
    }
  },
  {
    "name": "numberun",
    "description": "NumbeRun is a puzzle game I developed in 2007 for my school-leaving examination. The game was developed in Microsoft Visual C# 2005 using the Microsoft XNA library.",
    "url": "https://github.com/marcomontalbano/numberun",
    "homepageUrl": "https://marcomontalbano.com/portfolio/2/numberun",
    "createdAt": "2016-08-16T06:28:27Z",
    "updatedAt": "2020-03-04T22:06:55Z",
    "pushedAt": "2020-03-04T22:06:45Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "xna"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "csharp"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "game"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "microsoft-xna"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "pascal"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "c-plus-plus"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "numberun"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "puzzle-game"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "NumbeRun",
      "visible": true,
      "starCount": 1,
      "forkCount": 0,
      "repositoryTopics": [
        "xna",
        "csharp",
        "game",
        "microsoft-xna",
        "pascal",
        "c-plus-plus",
        "numberun",
        "puzzle-game"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/numberun/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/numberun/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "NumbeRun\n========\n\nNumbeRun is a puzzle game I developed in 2007 for my school-leaving examination. The game was developed in [Microsoft Visual C#](http://www.visualstudio.com/) 2005 using the [Microsoft XNA](https://it.wikipedia.org/wiki/Microsoft_XNA) library.\n\n[![NumbeRun Trailer - Marco Montalbano](https://ik.imagekit.io/marcomontalbano/tr:oi-youtube_play_2CggQdiSx.png/numberun_pl78r84gu.jpg)](https://www.youtube.com/watch?v=oRdzL2DX0yU \"NumbeRun Trailer - Marco Montalbano\")\n\n\nPlay Now\n--------\n\n[Download NumbeRun](https://github.com/marcomontalbano/numberun/releases/latest) and play now on Windows 10.\n\nBefore play, you need to install DirectX and XNA from `setup` folder.\n\n_system requirements:_\n\n- [Microsoft .NET Framework 2.0](http://www.microsoft.com/it-it/download/details.aspx?id=1639)\n- Microsoft XNA 1.0\n- Windows XP / 7 / 8 / 8.1 / 10\n\n\nScreenshots\n-----------\n\n![NumbeRun v2 - menu](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__menu.jpg) ![NumbeRun v2 - guide](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__guide.jpg) ![NumbeRun v2 - game1](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__game1.jpg) ![NumbeRun v2 - game2](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__game2.jpg)\n\n\nPlot\n----\n\nFiveRun has been trapped in the kingdom of DarkRun, an evil wizard who will do anything to prevent his escape.\n\nYou are the only one who can help FiveRun in his mission: leave DarkRun's lands stealing as much gold as he can. Mind though: these grounds are full of dangers! Pay attention to the GrumRuns (in the next release they will be renamed GrimRuns, 'cause I made a mistake), wicked creatures serving Lord DarkRun: they will haunt you and won't find their peace until they catch you.\n\nIn order to move from land to land, you need to find a magic door that you will be able to cross unscathed only if - that's for you to find out! :wink:\n\nNow you are ready to follow FiveRun in this adventure.\n\nOne last friendly piece of advice: FiveRun can't swim!\n\n\nOther versions\n--------------\n\nNumbeRun has been written in different programming languages during the years. The first version was in Pascal, then the game was re-written in C, then C++, then C++ with OpenGL and in the end in C# with Microsoft XNA.\n\nThe first release of the complete game was in C++ using a Windows Console, a big bidimensional matrix and **numbers as characters**, that's why the name is **NumbeRun** (numbers that run).\n\nIt was my very first project, the very first idea I worked on, just after starting high school. Every time I discovered a new language I took the chance to re-write it, so as to master the new knowledge. That's why there are so many versions of the same game. It evolved along with my competence.\n\n![NumbeRun v1 - menu](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__menu.jpg) ![NumbeRun v1 - game 1](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__game1.jpg) ![NumbeRun v1 - game 2](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__game2.jpg) ![NumbeRun v1 - game over](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__gameover.jpg)\n\n\nOpen Source\n-----------\n\nOn GitHub you can find all versions. Feel free to download, build and play :)\n\nCheck out the repository for source codes and binary files.\n"
      }
    }
  },
  {
    "name": "bash_profile",
    "description": "A collection of bash utilities. Set and unset proxy. Completions for git, svn and ssh. PS1 customization.",
    "url": "https://github.com/marcomontalbano/bash_profile",
    "homepageUrl": "",
    "createdAt": "2016-11-10T12:41:01Z",
    "updatedAt": "2020-01-27T01:54:56Z",
    "pushedAt": "2019-02-27T14:50:31Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 12
    },
    "forkCount": 3,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "bash-profile"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "terminal"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "shell"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "utility"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": ".bash_profile",
      "visible": false,
      "starCount": 12,
      "forkCount": 3,
      "repositoryTopics": [
        "bash-profile",
        "terminal",
        "shell",
        "utility"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/bash_profile/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/bash_profile/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "![](https://img.shields.io/badge/available_for-osx-green.svg?style=flat-square)\n![](https://img.shields.io/badge/available_for-ubuntu-green.svg?style=flat-square)\n![](https://img.shields.io/badge/available_for-windows-green.svg?style=flat-square)\n\n# .bash_profile\n\nThis is a collection of bash utilities. It contains:\n\n- [x] PS1 customization with Git and Svn integration.\n- [x] Bash Completions for Git, Svn, SSH and SFTP.\n- [x] set/unset proxy faster.\n- [x] Updatable `bash_profile` project.\n\n\n## Get started\n\nClone this project in your home folder `~`.\n\n```sh\ncd ~ && git clone https://github.com/marcomontalbano/bash_profile.git\n```\n\nOpen and modify your `$HOME/.bash_profile` on OS X and Windows or `$HOME/.bashrc` on Ubuntu, adding the following script.\n\n```sh\n# https://github.com/marcomontalbano/bash_profile\nsource ~/bash_profile/.bash_profile -u\n```\n\n### Options\n\n- `-p <http-proxy>`: combined with `-u`, you can use self-update behind proxy.\n- `-u`: enables self-update for bash_profile. (the latest release will automatically downloaded and loaded)\n- `-w`: show welcome screen on new tabs.\n\n\n## Completions\n\nThe following procedure works for OS X. If you are using Windows or Ubuntu, you don't need it. \n\nIf you want to use the git, svn and ssh completion, just run following scripts.\n\n```sh\n# Bash Completion for GIT\ncurl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/bash_profile/.bash_completion_git\n\n# Bash Completion for SVN\ncurl http://svn.apache.org/repos/asf/subversion/trunk/tools/client-side/bash_completion -o ~/bash_profile/.bash_completion_svn\n\n# Bash Completion for SSH and SFTP\ncurl https://gist.githubusercontent.com/marcomontalbano/7c48f6756e4e4133c30fdb8e1fff3100/raw -o ~/bash_profile/.bash_completion_ssh\n```\n\n## Useful Commands\n\n### Bash Profile\n\n- **bash_profile__path** - get project path.\n\n- **bash_profile__cd** - `cd` to the `bash_profile` folder. Something like `cd ~/bash_profile`\n\n- **bash_profile__version** - get current version.\n\n- **bash_profile__reload** - reload the project.\n\n- **bash_profile__reload_all** - reload your own `.bash_profile` or `.bashrc`.\n\n- **bash_profile__update** - update the `bash_profile` project with latest changes. Is \"just\" a `git pull` :smile:\n\n### General\n\nBelow a list of utilities that you can use on command line or your own .bash_profile.\n\n- **console__set_title** - set a console title. _(only for OS X and Windows)_\n\n- **cli__is_installed** - check if a program is installed on your system. *`cli__is_installed node` will return `true` if node is installed on your system, `false` otherwise.*\n\n- **proxy__set** - simply set the command line proxy. It works also for npm and apm, if you use them. *usage: `proxy__set http://domain:8080` or `proxy__set http://domain:8080 https://domain:8080`*\n\n- **proxy__unset** - simply unset the command line proxy.\n\n- **network__get_ip** - get ip address _(e.g. 192.168.0.5)_\n\n- **network__get_gateway** - get gateway address _(e.g. 192.168.0.1)_\n\n- **network__get_broadcast** - get broadcast address _(e.g. 192.168.0.1)_\n\n- **java__use_jdk** - if you work with different version of JDK, you can easily switch with `java__use_jdk 1.8`. _(only for OS X)_\n\n### Git\n\n- **git__update_date** - update last commit with current date. *usage: `git__update_date` or `git__update_date -v -5H`* _(only for OS X)_\n\n\n## PS1 customization\n\nPS1 is customized with multiple lines.\n\n1. green label - you can fetch the **pwd** path.\n1. yellow label _(optional)_ - it appear inside Git or Svn folders.\n1. cyan label - you have the **username** @ **hostname**\n\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/PS1.png)\n\n\n### Git integration\n\n_there are **no** changes on the active **master** branch_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--no-changes.png)\n\n_there are changes on the active **master** branch, but not committed yet_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--with-changes.png)\n\n_you have created a **new-branch**, but not pushed yet_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--new-branch-no-changes.png)\n\n_you have created and pushed a **new-branch**_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--new-branch-no-changes-pushed.png)\n\n_you have created a **new-branch** with some changes, but not committed and pushed yet_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--new-branch-with-changes.png)\n\n_you have pushed the **new-branch**, but it has other changes to commit_\n![](https://github.com/marcomontalbano/bash_profile/raw/master/images/git--new-branch-with-changes-pushed.png)\n"
      }
    }
  },
  {
    "name": "an-introduction-to-frontend",
    "description": "This is an introduction to Frontend.",
    "url": "https://github.com/marcomontalbano/an-introduction-to-frontend",
    "homepageUrl": "https://marcomontalbano.com/portfolio/6/an-introduction-to-frontend-for-beginners",
    "createdAt": "2017-04-13T16:53:22Z",
    "updatedAt": "2020-03-20T20:12:58Z",
    "pushedAt": "2020-03-20T20:12:55Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "frontend"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "course"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "slides"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "vanilla-javascript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jquery"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "scss"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nodejs"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "gruntjs"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "An introduction to Frontend",
      "visible": true,
      "starCount": 1,
      "forkCount": 1,
      "repositoryTopics": [
        "frontend",
        "course",
        "slides",
        "vanilla-javascript",
        "jquery",
        "scss",
        "nodejs",
        "gruntjs"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/an-introduction-to-frontend/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/an-introduction-to-frontend/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "An introduction to Frontend\n===========================\n\nWelcome to **An introduction to Frontend**.\n\nThe course covers:\n\n- HTML, CSS and Javascript (ES6) basics\n- DOM manipulation with [Vanilla JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n- Dependency management with [NPM](https://www.npmjs.com/)\n- Task runner (e.g. [Parcel](https://en.parceljs.org/))\n- CSS preprocessor (e.g. [Scss](https://sass-lang.com/))\n\n[Here](https://marcomontalbano.github.io/an-introduction-to-frontend) you can find what my course aims to create.\n\nAll slides have been prepared and used by me while teaching a course on Frontend basics and are available on speakerdeck.\n\n[https://speakerdeck.com/marcomontalbano/an-introduction-to-frontend-2020-edition](https://speakerdeck.com/marcomontalbano/an-introduction-to-frontend-2020-edition)\n"
      }
    }
  },
  {
    "name": "mako-framework",
    "description": "Mako Framework core. Now supports PHP 7.",
    "url": "https://github.com/marcomontalbano/mako-framework",
    "homepageUrl": "https://makoframework.com",
    "createdAt": "2017-06-21T06:32:46Z",
    "updatedAt": "2017-07-29T12:31:20Z",
    "pushedAt": "2019-05-14T11:30:41Z",
    "isFork": true,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "framework"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "php7"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mako-framework"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Mako Framework",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "repositoryTopics": [
        "framework",
        "php7",
        "mako-framework"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/mako-framework/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/mako-framework/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Mako Framework\n\n[![Build Status](https://api.travis-ci.org/marcomontalbano/mako-framework.svg?branch=master)](https://travis-ci.org/marcomontalbano/mako-framework)\n[![Latest Stable Version](https://img.shields.io/github/release/marcomontalbano/mako-framework.svg)](https://github.com/marcomontalbano/mako-framework/releases)\n\nThis fork adds support for **PHP 7** to [Mako Framework](https://github.com/mako-framework/framework) 3.x.\n\nIf you are currently use this old version, you can now update to Mako Framework 3.7 and use PHP 7.\n\n## How to update\n\nAs suggested by [@freost](https://github.com/mako-framework/framework/pull/221#issuecomment-310623621) (i asked for an official release) you just need to update your `composer.json`.\n\n```json\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/marcomontalbano/mako-framework\"\n        }\n    ],\n    \"require\": {\n        \"mako/framework\": \"3.7.*\",\n    },\n}\n```\n\nThat's it! Run `composer update` and start to play with PHP 7.\n"
      }
    }
  },
  {
    "name": "html-miner",
    "description": "A powerful miner that will scrape html pages for you. ` HTML Scraper ´",
    "url": "https://github.com/marcomontalbano/html-miner",
    "homepageUrl": "https://marcomontalbano.github.io/html-miner",
    "createdAt": "2017-08-12T20:38:43Z",
    "updatedAt": "2020-04-14T08:56:50Z",
    "pushedAt": "2020-04-14T08:57:06Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "html-scraper"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "scraper"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nodejs"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "npm-package"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coverage"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nyc"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "istanbul"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "HTML Miner",
      "visible": true,
      "starCount": 2,
      "forkCount": 1,
      "repositoryTopics": [
        "html-scraper",
        "scraper",
        "nodejs",
        "npm-package",
        "mocha",
        "coverage",
        "nyc",
        "istanbul"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/html-miner/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/html-miner/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "HTML Miner\n==========\n\n[![Npm](https://img.shields.io/npm/v/html-miner.svg)](https://www.npmjs.com/package/html-miner)\n[![Build Status](https://travis-ci.org/marcomontalbano/html-miner.svg?branch=master)](https://travis-ci.org/marcomontalbano/html-miner)\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/html-miner/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/html-miner?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b9430880d9994818b4e32d5ba024ba5c)](https://www.codacy.com/app/marcomontalbano/html-miner?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=marcomontalbano/html-miner&amp;utm_campaign=Badge_Grade)\n[![Code Climate](https://codeclimate.com/github/marcomontalbano/html-miner/badges/gpa.svg)](https://codeclimate.com/github/marcomontalbano/html-miner)\n[![Issue Count](https://codeclimate.com/github/marcomontalbano/html-miner/badges/issue_count.svg)](https://codeclimate.com/github/marcomontalbano/html-miner/issues)\n\nA powerful miner that will scrape html pages for you.\n\n## Install\n\n[![NPM](https://nodei.co/npm/html-miner.png)](https://nodei.co/npm/html-miner/)\n\n```sh\n# using npm\nnpm i --save html-miner\n\n# using yarn\nyarn add html-miner\n```\n\n\n## Usage\n\n### Arguments\n\n`html-miner` accepts two arguments: `html` and `selector`.\n\n```js\nconst htmlMiner = require('html-miner');\n\n// htmlMiner(html, selector);\n```\n\n#### HTML\n\n_html_ is a string and contains `html` code.\n\n```js\nlet html = '<div class=\"title\">Hello <span>Marco</span>!</div>';\n```\n\n#### SELECTOR\n\n_selector_ could be:\n\n`STRING`\n\n```js\nhtmlMiner(html, '.title');\n//=> Hello Marco!\n```\n\nIf the selector extracts more elements, the result is an array:\n\n```js\nlet htmlWithDivs = '<div>Element 1</div><div>Element 2</div>';\nhtmlMiner(htmlWithDivs, 'div');\n//=> ['Element 1', 'Element 2']\n```\n\n`FUNCTION`\n\nRead [function in detail](https://github.com/marcomontalbano/html-miner/raw/master/#function-in-detail) paragraph.\n\n```js\nhtmlMiner(html, () => 'Hello everyone!');\n//=> Hello everyone!\n\nhtmlMiner(html, function () {\n    return 'Hello everyone!'\n});\n//=> Hello everyone!\n```\n\n`ARRAY`\n\n```js\nhtmlMiner(html, ['.title', 'span']);\n//=> ['Hello Marco!', 'Marco']\n```\n\n`OBJECT`\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: 'span'\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco'\n//   }\n```\n\nYou can combine `array` and `object` with each other or with string and functions.\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: '.title span',\n    upper: (arg) => { return arg.scopeData.who.toUpperCase(); }\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco',\n//     upper: 'MARCO'\n//   }\n```\n\n\n### Function in detail\n\nA `function` accepts only one argument that is an `object` containing:\n\n- `$`: is a jQuery-like function pointing to the document ( html argument ). You can use it to query and fetch elements from the html.\n\n    ```js\n    htmlMiner(html, (arg) => { return arg.$('.title').text(); });\n    //=> Hello Marco!\n    ```\n\n- `$scope`: useful when combined with `_each_` or `_container_` (read [special keys](https://github.com/marcomontalbano/html-miner/raw/master/#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: 'span',\n            value: (arg) => {\n                // \"arg.$scope.find('.title')\" doesn't exist.\n                return arg.$scope.text();\n            }\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         value: 'Marco'\n    //     }]\n    //   }\n    ```\n\n- `globalData`: is an object that contains all **previously** fetched datas.\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: '.title span',\n            pageTitle: function(arg) {\n                // \"arg.globalData.who\" is undefined because defined later.\n                return arg.globalData.title;\n            }\n        },\n        who: '.title span'\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         pageTitle: 'Hello Marco!'\n    //     }],\n    //     who: 'Marco'\n    //   }\n    ```\n\n- `scopeData`: similar to `globalData`, but only contains scope data. Useful when combined with `_each_` (read [special keys](https://github.com/marcomontalbano/html-miner/raw/master/#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        upper: (arg) => { return arg.scopeData.title.toUpperCase(); },\n        sublist: {\n            who: '.title span',\n            upper: (arg) => {\n                // \"arg.scopeData.title\" is undefined because \"title\" is out of scope.\n                return arg.scopeData.who.toUpperCase();\n            },\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     upper: 'HELLO MARCO!',\n    //     sublist: {\n    //         who: 'Marco',\n    //         upper: 'MARCO'\n    //     }\n    //   }\n    ```\n\n\n### Special keys\n\nWhen selector is an `object`, you can use _special keys_: \n\n- `_each_`: creates a list of items. HTML Miner will iterate for the value and will parse siblings keys.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_eachId_`: useful when combined with `_each_`. Instead of creating an Array, it creates an Object where keys are the result of `_eachId_` function.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            _eachId_: function(arg) {\n                return arg.$scope.data('id');\n            }\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_container_`: uses the parsed value as container. HTML Miner will parse siblings keys, searching them inside the _container_.\n\n    ```js\n    {\n        footer: {\n            _container_: 'footer',\n            copyright: (arg) => { return arg.$scope.text().trim(); },\n            company: 'span' // find only 'span' inside 'footer'.\n        }\n    }\n    ```\n\nFor more details see the following [example](https://github.com/marcomontalbano/html-miner/raw/master/#lets-try-this-out).\n\n\n## Let's try this out\n\nConsider the following html snippet: we will try and fetch some information.\n\n```html\n<h1>Hello, <span>world</span>!</h1>\n<div class=\"articles\">\n    <div class=\"article\" data-id=\"a001\">\n        <h2>Heading 1</h2>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n    <div class=\"article\" data-id=\"a002\">\n        <h2>Heading 2</h2>\n        <p>Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.</p>\n    </div>\n    <div class=\"article\" data-id=\"a003\">\n        <h2>Heading 3</h2>\n        <p>Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.</p>\n    </div>\n</div>\n<footer>\n    <p>&copy; <span>Company</span> 2017</p>\n</footer>\n```\n\n```js\nconst htmlMiner = require('html-miner');\n\nlet json = htmlMiner(html, {\n    title: 'h1',\n    who: 'h1 span',\n    h2: 'h2',\n    articlesArray: {\n        _each_: '.articles .article',\n        title: 'h2',\n        content: 'p',\n    },\n    articlesObject: {\n        _each_: '.articles .article',\n        _eachId_: function(arg) {\n            return arg.$scope.data('id');\n        },\n        title: 'h2',\n        content: 'p',\n    },\n    footer: {\n        _container_: 'footer',\n        copyright: (arg) => { return arg.$scope.text().trim(); },\n        company: 'span',\n        year: (arg) => { return arg.scopeData.copyright.match(/[0-9]+/)[0]; },\n    },\n    greet: () => { return 'Hi!'; }\n});\n\nconsole.log( json );\n\n//=> {\n//     title: 'Hello, world!',\n//     who: 'world',\n//     h2: ['Heading 1', 'Heading 2', 'Heading 3'],\n//     articlesArray: [\n//         {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     ],\n//     articlesObject: {\n//         'a001': {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         'a002': {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         'a003': {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     },\n//     footer: {\n//         copyright: '© Company 2017',\n//         company: 'Company',\n//         year: '2017'\n//     },\n//     greet: 'Hi!'\n//   }\n\n```\n\nYou can find other examples under the folder `/examples` or you can directly use the [Online Playground](https://marcomontalbano.github.io/html-miner).\n\n```sh\n# you can test examples with nodejs\nnode examples/demo.js\nnode examples/site.js\n```\n\n\n## Development\n\n```sh\nnpm install\nnpm test\n\n# start the playground locally\nnpm start\n```\n"
      }
    }
  },
  {
    "name": "speedtest-for-digitalocean",
    "description": "Run speed tests for all DigitalOcean datacenters faster than ever.",
    "url": "https://github.com/marcomontalbano/speedtest-for-digitalocean",
    "homepageUrl": "http://speedtest-do.marcomontalbano.com",
    "createdAt": "2017-12-21T09:22:40Z",
    "updatedAt": "2020-04-08T09:32:13Z",
    "pushedAt": "2020-04-08T09:34:54Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 33
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "fastest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "speedtest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "speed-test"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "digitalocean"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "datacenter"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ping"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Speed Test for DigitalOcean",
      "visible": true,
      "starCount": 33,
      "forkCount": 0,
      "repositoryTopics": [
        "fastest",
        "speedtest",
        "speed-test",
        "digitalocean",
        "datacenter",
        "ping"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Speed Test for DigitalOcean\n===========================\n\n[![Build Status](https://travis-ci.org/marcomontalbano/speedtest-for-digitalocean.svg?branch=master)](https://travis-ci.org/marcomontalbano/speedtest-for-digitalocean)\n[![Beerpay](https://beerpay.io/marcomontalbano/speedtest-for-digitalocean/badge.svg?style=beer)](https://beerpay.io/marcomontalbano/speedtest-for-digitalocean)\n[![Beerpay](https://img.shields.io/badge/make-wish-f95c5c.svg)](https://beerpay.io/marcomontalbano/speedtest-for-digitalocean)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n\nDigitalOcean provides usefull links to run speed tests for each datacenter, but only one at a time.\nI created this repository to speed up this process.\n\nRun speed tests for all DigitalOcean datacenters faster than ever.\n\n[http://speedtest-do.marcomontalbano.com](http://speedtest-do.marcomontalbano.com)\n\nJust click start!\n\n![Speedtest for DigitalOcean - Screenshot](https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/public/images/speedtest-for-digitalocean-screenshot-without-header.jpg)\n\nThis tool uses the same service used by __speedtest-*.digitalocean.com__ so the result should be the same.\n\n\n## Need an account for DigitalOcean?\n\nClick [here](https://m.do.co/c/45b8cffe90f8) to register a new one!\n\n\n## Privacy\n\nGoogle Analytics is used to record the following:\n\n* [Basic visit data](https://support.google.com/analytics/answer/6004245?ref_topic=2919631).\n* `ping`, `download` and `upload` speed for each region in order to provide the consultable table.\n\nClicking on `start` you accept this terms & condition; no additional data is sent to the server.\n\n\n## Development stuff\n\nThe project has been developed with [React](https://reactjs.org/) and [Flux](http://facebook.github.io/flux/).\n\nThe branch `gh-pages` is generated by [TravisCI](https://travis-ci.org/marcomontalbano/speedtest-for-digitalocean) but is not used. I don't use [GitHub Pages](https://pages.github.com/) due to it forces `https` protocol.\nThe website is hosted by [DigitalOcean](https://m.do.co/c/45b8cffe90f8).\n\nI'm using [CodeShip](http://codeship.com/) to build and deploy the website.\n"
      }
    }
  },
  {
    "name": "github-emoji",
    "description": "Finally a complete list of GitHub Emojis.",
    "url": "https://github.com/marcomontalbano/github-emoji",
    "homepageUrl": "https://marcomontalbano.github.io/github-emoji/",
    "createdAt": "2018-04-28T15:26:07Z",
    "updatedAt": "2020-04-08T07:43:00Z",
    "pushedAt": "2020-04-08T07:44:15Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "github-emoji"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "emoji"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "emojis"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "gh-pages"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "GitHub Emoji",
      "visible": true,
      "starCount": 0,
      "forkCount": 0,
      "repositoryTopics": [
        "github-emoji",
        "emoji",
        "emojis",
        "gh-pages",
        "travis-ci"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/github-emoji/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/github-emoji/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "GitHub Emoji\n============\n\n[![Build Status](https://travis-ci.org/marcomontalbano/github-emoji.svg?branch=master)](https://travis-ci.org/marcomontalbano/github-emoji)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n\nFinally a complete list of GitHub Emojis.\n\nNow you can search and use all emojis you want in your .md files, like this :cowboy_hat_face: or this :european_castle:.\n\n## Development stuff\n\nThe project has been developed with [React](https://reactjs.org/) and [Flux](http://facebook.github.io/flux/).\n\nI'm using [TravisCI](https://travis-ci.org/marcomontalbano/github-emoji) to build and deploy the website.\n\n## Support on Beerpay\nHey dude! Help me out for a couple of :beers:!\n\n[![Beerpay](https://beerpay.io/marcomontalbano/github-emoji/badge.svg?style=beer-square)](https://beerpay.io/marcomontalbano/github-emoji)  [![Beerpay](https://beerpay.io/marcomontalbano/github-emoji/make-wish.svg?style=flat-square)](https://beerpay.io/marcomontalbano/github-emoji?focus=wish)\n"
      }
    }
  },
  {
    "name": "video-to-markdown",
    "description": "How to embed a video in markdown? Here the answer. Add videos to your markdown files easier.",
    "url": "https://github.com/marcomontalbano/video-to-markdown",
    "homepageUrl": "https://video-to-markdown.netlify.com",
    "createdAt": "2018-09-06T17:46:43Z",
    "updatedAt": "2020-04-18T12:34:55Z",
    "pushedAt": "2020-03-21T08:14:02Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 30
    },
    "forkCount": 6,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "video"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "youtube"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "vimeo"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "dailymotion"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "markdown"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify-lambda"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "parcel"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "facebook"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "asciinema"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "google-drive"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Video to Markdown",
      "visible": true,
      "starCount": 30,
      "forkCount": 6,
      "repositoryTopics": [
        "video",
        "youtube",
        "vimeo",
        "dailymotion",
        "markdown",
        "netlify",
        "netlify-lambda",
        "parcel",
        "facebook",
        "asciinema",
        "google-drive"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/video-to-markdown/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/video-to-markdown/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Video to Markdown\n=================\n\n[![Build Status](https://travis-ci.org/marcomontalbano/video-to-markdown.svg?branch=master)](https://travis-ci.org/marcomontalbano/video-to-markdown)\n[![Beerpay](https://beerpay.io/marcomontalbano/video-to-markdown/badge.svg?style=beer)](https://beerpay.io/marcomontalbano/video-to-markdown)\n[![Beerpay](https://img.shields.io/badge/make-wish-f95c5c.svg)](https://beerpay.io/marcomontalbano/video-to-markdown)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/545bbce5-8f34-4834-9e16-685a9990c987/deploy-status)](https://app.netlify.com/sites/video-to-markdown/deploys)\n\nAdd videos to your markdown files easier - [https://video-to-markdown.netlify.com](https://video-to-markdown.netlify.com).\n\n\n## Why?\n\nHow often did you find yourself googling _¨How to embed a video in markdown?¨_\n\nWhile its not possible to embed a video in markdown, the best and easiest way is to extract a frame from the video, add a layer with a play icon and link the video url on the image.\n\nSpeaking HTMLese, this is what you would do:\n\n```html\n<a href=\"{video-url}\" title=\"Link Title\"><img src=\"https://github.com/marcomontalbano/video-to-markdown/raw/master/{image-url}\" alt=\"Alternate Text\" /></a>\n```\n\nthat translates into markdown as:\n\n```md\n[![Alternate Text](https://github.com/marcomontalbano/video-to-markdown/raw/master/{image-url})](https://github.com/marcomontalbano/video-to-markdown/raw/master/{video-url} \"Link Title\")\n```\n\nTo speed up the process I developped this tool that will do it for you.\n\nYou just need to paste the video url in the field above and you will get the markdown you need.\n\n\n## Features\n\nList of supported video providers:\n\n- Youtube\n- Facebook (low-quality)\n- Dailymotion\n- Vimeo\n- Asciinema\n- Google Drive\n\n\n## Hosting\n\nFirst of all you need to create a [Cloudinary](https://cloudinary.com) account (I'm using this service to generate and host images) so that you can copy your personal `CLOUDINARY_URL` from your dashboard. The url is something similar to `cloudinary://my_key:my_secret@my_cloud_name`.\n\nNow you can easily deploy your own copy on Netlify.\n\n[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/marcomontalbano/video-to-markdown)\n\n\n## Development stuff\n\nTo run the project locally, here’s what you’ll need:\n\n### System Requirements\n\n* [git](https://git-scm.com)\n* [NodeJS](https://github.com/marcomontalbano/video-to-markdown/raw/master/nodejs.org) 10 or greater\n\n### Setup\n\n`cd` into your local copy of the repository and run `npm install`\n\n```\ncd video-to-markdown\nnpm install\n```\n\n```\nnpm start\n```\n\nThis will start the client server on http://localhost:8080, and the netlify-lambda server on http://localhost:8081.\n\n[netlify-lambda](https://github.com/netlify/netlify-lambda) isn’t required to deploy Lambda functions to Netlify, but it offers some handy features out of the box that make it quicker to get started, like the local dev server and nice defaults for transpiling and bundling functions in production.\n\nThe client server is configured to proxy `/.netlify` requests to the Lambda server (see [webpack.client.js](https://github.com/marcomontalbano/video-to-markdown/raw/master/webpack.client.js)). This is the same behavior the site has when it’s deployed to Netlify.\n\n## Privacy\n\nGoogle Analytics is used to record the following:\n\n* [Basic visit data](https://support.google.com/analytics/answer/6004245?ref_topic=2919631).\n* `referer` or `video url` to track api usage.\n\nAll images are generated via [Cloudinary](https://cloudinary.com/) and stored in it.\nIn this way the generated images are cached so we can avoid to call Netlify functions again thus reducing the quota consumption.\n\nBy clicking on `convert to markdown` or consuming api you accept this terms & condition; no additional data is sent to the server.\n"
      }
    }
  },
  {
    "name": "wasm-vs-js-benchmark",
    "description": "A comparison between WebAssembly and Javascript",
    "url": "https://github.com/marcomontalbano/wasm-vs-js-benchmark",
    "homepageUrl": "https://marcomontalbano.github.io/wasm-vs-js-benchmark",
    "createdAt": "2019-02-05T11:14:50Z",
    "updatedAt": "2020-04-08T08:32:33Z",
    "pushedAt": "2020-04-08T08:37:04Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 3
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "webassembly"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "javascript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "benchmark"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "webworkers"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "rust"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "wasm"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "WebAssembly vs Javascript",
      "visible": true,
      "starCount": 3,
      "forkCount": 0,
      "repositoryTopics": [
        "webassembly",
        "javascript",
        "benchmark",
        "webworkers",
        "rust",
        "mocha",
        "wasm",
        "travis-ci"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/wasm-vs-js-benchmark/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/wasm-vs-js-benchmark/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# WebAssembly vs Javascript\n\n[![Build Status](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark.svg?branch=master)](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark)\n[![Dependabot Status](https://api.dependabot.com/badges/status?host=github&repo=marcomontalbano/wasm-vs-js-benchmark)](https://dependabot.com)\n\n*A comparison between WebAssembly and Javascript made for ~~studying~~ fun.*\n\n## What's in the box\n\n- WebAssembly with Rust\n- Benchmark with fancy charts\n- Web Workers to avoid a frozen main thread\n- Build and deploy with Travis CI\n\n## Rust and WebAssembly\n\nThere are two books that fully cover this section:\n\n- https://doc.rust-lang.org/book\n- https://rustwasm.github.io/book\n\nIn this project I'm also using [`wasm-bingen`](https://rustwasm.github.io/wasm-bindgen) and [`wasm-pack`](https://github.com/rustwasm/wasm-pack).\n\n## Project\n\n### Folder Structure\n\nSource code is splitted into two main folders: `src` that contains our Rust application and `src-js` that contains our Javascript application.\n\nI tried to make their folder structure as similar as possible:\n\n```sh\nsrc\n├── libs\n│   ├── mod.rs\n│   ├── ...\n│   └── primes.rs\n└── main.rs\n\nsrc-js\n├── libs\n│   ├── mod.js\n│   ├── ...\n│   └── primes.js\n├── ...\n├── bootstrap.js\n└── main.js\n```\n\n**`*/libs/mod.*`** is the entry point for declaring all modules. The `.rs` version of this file will be compiled to `.wasm`.\n\n**`*/libs/primes.*`** is a module example, written both in Rust and Javascript.\n\n**`*/main.*`** is the entry point for the application. The `.rs` file is the one used by `cargo run` command. The `.js` file is the one used by webpack.\n\n**`./src-js/bootstrap.js`** is the bootstrap file for the web application that loads the `main.js` file asynchronously.\n\n\n### Rust\n\nThe first step is to [install Rust](https://doc.rust-lang.org/stable/book/ch01-01-installation.html). We’ll download Rust through `rustup`, a command line tool for managing Rust versions and associated tools.\n\nRunnig following command we'll install Rust and [Cargo](https://doc.rust-lang.org/cargo) automatically.\n\n```sh\n$ curl https://sh.rustup.rs -sSf | sh\n\n# install `wasm-pack`\n$ cargo install wasm-pack\n```\n\nNow we are able to use the following commands from our project folder.\n\n```sh\n# test .rs files\n$ cargo test\n\n# compile `src/main.rs`\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s)\n\n# or compile `src/main.rs` with optimizations\n$ cargo build --release\n    Finished release [optimized] target(s)\n```\n\nNow that we have built our code, we can run it:\n\n```sh\n$ ./target/release/wasm-vs-js-benchmark primes-get_primes 11\n```\n\nWe can also use `cargo run` to compile and then run it, all in one step:\n\n```sh\n$ cargo run primes-get_primes 11\n\n# compile and run our project with optimizations\n$ cargo run --release primes-get_primes 11\n```\n\nLast but not least, we'll compile our project to `.wasm`:\n\n```sh\n$ wasm-pack build\n```\n\nNow we are able to use the content of `./pkg` folder for our web application.\n\n\n### Javascript\n\nThe goal of this project is benchmarking WebAssembly and Javascript. Some task will use big computations that takes time to execute.\n\n[`Web Workers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) makes it possible to run a script operation in a background thread separate from the main execution thread of a web application.\n\nThe web application is bundled with [`Webpack`](https://webpack.js.org/).\n\nRun following command to start it:\n\n```sh\n$ npm run build:wasm\n$ npm start\n```\n\nProject is running at http://localhost:8080/\n\n\n### Unit Test\n\nYou can run unit test for Rust and Javascript, simply running `npm test`.\n\nI use `mocha` for javascript unit test, transpiling ES6 with `@babel/core`, `@babel/preset-env` and `@babel/register`.\n\n\n## Benchmark\n\n### Rust to Native Code\n\nThe execution time of .wasm binaries is just a bit slower than the execution of same native code.\n\nFor benchmarking the native code, I use [Hyperfine](https://github.com/sharkdp/hyperfine).\n\nThese benchmarks are recorded on a MacBook Pro (15-inch, 2016) having these specs:\n\n- macOS Mojave\n- 2,6 GHz Intel Core i7 (4 cores)\n- 16 GB 2133 MHz LPDDR3\n\n```sh\n$ cargo build --release\n\n$ hyperfine --warmup 3 --export-markdown BENCHMARK.md \\\n    './target/release/wasm-vs-js-benchmark primes-get_primes 100000' \\\n    './target/release/wasm-vs-js-benchmark matrix-multiply 500 500'\n```\n\n| Command | Mean [s] | Min…Max [s] |\n|:---|---:|---:|\n| `./target/release/wasm-vs-js-benchmark primes-get_primes 100000` | 1.211 ± 0.018 | 1.196…1.255 |\n| `./target/release/wasm-vs-js-benchmark matrix-multiply 500 500` | 0.435 ± 0.016 | 0.417…0.469 |\n\n\n### WebAssembly vs Javascript\n\nhttps://marcomontalbano.github.io/wasm-vs-js-benchmark\n\n\n## Useful Links\n\n- https://webassembly.org/\n\n- https://doc.rust-lang.org/book\n- https://doc.rust-lang.org/rust-by-example\n\n- https://developer.mozilla.org/en-US/docs/WebAssembly\n- https://developer.mozilla.org/en-US/docs/WebAssembly/rust_to_wasm\n\n- https://rustwasm.github.io/book\n- https://rustwasm.github.io/wasm-bindgen\n\n- https://github.com/rustwasm/create-wasm-app\n- https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n- https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71\n\n"
      }
    }
  },
  {
    "name": "docker-bootcamp",
    "description": null,
    "url": "https://github.com/marcomontalbano/docker-bootcamp",
    "homepageUrl": null,
    "createdAt": "2019-04-09T12:34:58Z",
    "updatedAt": "2019-06-15T12:28:19Z",
    "pushedAt": "2019-06-15T12:28:17Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "docker"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "docker-compose"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "containers"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "images"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "bootcamp"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Docker Bootcamp",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "repositoryTopics": [
        "docker",
        "docker-compose",
        "containers",
        "images",
        "bootcamp"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/docker-bootcamp/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/docker-bootcamp/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Docker Bootcamp\n\n\n## Topic\n\n1. [Get Started](https://github.com/marcomontalbano/docker-bootcamp/raw/master/#get-started)\n1. [Volumes](https://github.com/marcomontalbano/docker-bootcamp/raw/master/#volumes)\n1. [Dockerfile](https://github.com/marcomontalbano/docker-bootcamp/raw/master/#dockerfile)\n1. [Tips & Tricks](https://github.com/marcomontalbano/docker-bootcamp/raw/master/#tips--tricks)\n\n## Get Started\n\nCommon commands:\n\n| command                 | description\n| ----------------------- | ---\n| `docker images`         | List images\n| `docker run`            | Run a command in a new container\n| `docker ps`             | List containers (shortcut for `docker container ls`)\n| `docker stop CONTAINER` | Stop one or more running containers by id or name\n| `docker rm CONTAINER`   | Remove one or more containers\n| `docker rmi IMAGE`      | Remove one or more images\n| `docker save IMAGE`     | Save one or more images to a tar archive (streamed to STDOUT by default)\n\n\n### `docker run`\n\nCommon `docker run` arguments are:\n\n| argument    | description\n| ----------- | ---\n| `--rm`      | Automatically remove the container when it exits\n| `-p`        | Publish a container's port(s) to the host (`-p host_port:container_port`)\n| `-v`        | Bind mount a volume (`-v host_directory:container_directory`)\n| `-w`        | Working directory inside the container\n| `-ti`       | Allocate a pseudo-TTY and keep STDIN open even if not attached\n| `-e`        | Set environment variables (`-e ENV_NAME=env_value`)\n| `-d`        | Run container in background and print container ID\n| `--name`    | Assign a name to the container\n\n\n### Examples\n\n#### PHP + Apache\n\n```sh\n# interactive shell\ndocker run --rm -ti php:7.1-cli\n\ndocker run --rm -ti -p 8080:80 -v $(pwd)/example/apache-php/public:/usr/src/myapp -w /usr/src/myapp php:7.1-cli -S 0.0.0.0:80\ndocker run --rm -ti -p 8080:80 -v $(pwd)/example/apache-php/public:/usr/src/myapp -w /usr/src/myapp php:7.2-cli -S 0.0.0.0:80\ndocker run --rm -ti -p 8080:80 -v $(pwd)/example/apache-php/public:/usr/src/myapp -w /usr/src/myapp php:7.3-cli -S 0.0.0.0:80\n\ndocker run --rm -d -p 80:80 --name my-apache-php-app -v $(pwd)/example/apache-php/public:/var/www/html php:7.3-apache\ndocker stop my-apache-php-app\n\ndocker run --rm -ti -p 80:80 -v $(pwd)/example/apache-php/public:/var/www/html php:7.3-apache\n```\n\n#### Node.js\n\n```sh\n# iteractive shell\ndocker run --rm -ti node\n\ndocker run --rm -ti -v $(pwd)/example/nodejs:/www -w /www node npm install\ndocker run --rm -ti -v $(pwd)/example/nodejs:/www -w /www -p 3000:3000 node npm start\n```\n\n#### Jenkins + BlueOcean\n\n```sh\ndocker run -u root --rm -d -p 49990:8080 -p 50000:50000 --name jenkinsci -v jenkins-data:/var/jenkins_home -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean\n\n# show containers\ndocker ps -a\n\n# CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                                               NAMES\n# 2f76b46560bd        jenkinsci/blueocean   \"/sbin/tini -- /usr/…\"   10 minutes ago      Up 10 minutes       0.0.0.0:50000->50000/tcp, 0.0.0.0:49990->8080/tcp   jenkinsci\n\n# execute bash command interactively in container ID '2f76b46560bd'\ndocker exec -it 2f76b46560bd bash\n\n# \ndocker stop 2f76b46560bd\n```\n\n## Volumes\n\nhttps://gist.github.com/BretFisher/5e1a0c7bcca4c735e716abf62afad389\n\n```sh\ndocker volume ls\ndocker inspect compose_db_data\n# [\n#     {\n#         \"CreatedAt\": \"2019-04-10T07:25:55Z\",\n#         \"Driver\": \"local\",\n#         \"Labels\": {\n#             \"com.docker.compose.project\": \"compose\",\n#             \"com.docker.compose.version\": \"1.23.2\",\n#             \"com.docker.compose.volume\": \"db_data\"\n#         },\n#         \"Mountpoint\": \"/var/lib/docker/volumes/compose_db_data/_data\",\n#         \"Name\": \"compose_db_data\",\n#         \"Options\": null,\n#         \"Scope\": \"local\"\n#     }\n# ]\n\ndocker run --rm -it --privileged --pid=host justincormack/nsenter1\n\n# / #  ls /var/lib/docker/volumes/compose_db_data/_data\n```\n\n\n## Dockerfile\n\n\n\n## Tips & Tricks\n\n\n### OS\n\nAs a DigitalOcean fanboy, I'm working with containers on [RancherOS](https://rancher.com/rancher-os/) that is a container distributions easy to install on DO.\n\n\n### Aliases\n\nHere a list of useful aliases:\n\n```sh\n# git\nalias git=\"docker run --rm -ti -v $(pwd):/git -v $HOME/.ssh:/root/.ssh alpine/git\"\n\n# node\nexport DOCKER_TAG_NODE=latest\nalias node=\"docker run --rm -ti -v $(pwd):/www -w /www node:$DOCKER_TAG_NODE node\"\nalias  npm=\"docker run --rm -ti -v $(pwd):/www -w /www node:$DOCKER_TAG_NODE npm\"\n\nnode () {\n  docker run --rm -ti -v $(pwd):/www -w /www node:$1 node ${@:2};\n}\n\nnpm () {\n  docker run --rm -ti -v $(pwd):/www -w /www node:$1 npm ${@:2};\n}\n\n# php\nexport DOCKER_TAG_PHP=latest\nalias php=\"docker run --rm -ti -v $(pwd):/www -w /www php:$DOCKER_TAG_PHP php\"\nalias php-server=\"docker run --rm -ti -v $(pwd):/www -w /www -p 8080:8080 php:$DOCKER_TAG_PHP php -S 0.0.0.0:8080\"\n\nphp () {\n  docker run --rm -ti -v $(pwd):/www -w /www php:$1 php ${@:2};\n}\n```\n"
      }
    }
  },
  {
    "name": "figma-export",
    "description": "Export tool for Figma. You can easily and automatically export your figma components and use them directly into your website.",
    "url": "https://github.com/marcomontalbano/figma-export",
    "homepageUrl": "https://figma-export.netlify.com",
    "createdAt": "2019-06-12T21:37:53Z",
    "updatedAt": "2020-04-17T16:02:08Z",
    "pushedAt": "2020-04-14T19:37:15Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 9
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "figma"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "figma-export"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "svg"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "components"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cli"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coveralls"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "figma-export",
      "visible": true,
      "starCount": 9,
      "forkCount": 1,
      "repositoryTopics": [
        "figma",
        "figma-export",
        "svg",
        "components",
        "mocha",
        "cli",
        "coveralls",
        "typescript"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/figma-export/raw/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/figma-export/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "<p align=\"center\">\n    <img src=\"https://github.com/marcomontalbano/figma-export/raw/master/images/figma-export.png\" width=\"200\" />\n</p>\n\n<p align=\"center\">\n    Export tool for Figma.\n</p>\n\n<p align=\"center\">\n    You can easily and automatically export your figma components and use them directly into your website.\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/marcomontalbano/figma-export\"><img alt=\"Build Status\" src=\"https://github.com/marcomontalbano/figma-export/workflows/Node%20CI/badge.svg\" /></a>\n    <a href=\"https://coveralls.io/github/marcomontalbano/figma-export?branch=master\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/marcomontalbano/figma-export/badge.svg?branch=master\" /></a>\n</p>\n\n\n## Personal Access Token\n\nFirst of all you have to set the environment variable `FIGMA_TOKEN`.\n\nTo do so, you need a **Personal Access Token**. You can generate one from your *Account Settings*.\n\n<img width=\"209\" alt=\"Figma - Account Menu\" src=\"https://github.com/marcomontalbano/figma-export/raw/master/images/figma--account-menu.png\" />\n\nInside the Account Settings click on *Create a new personal access token* and enter a description.\n\nCopy the token, this is your only chance to do so!\n\n```sh\nexport FIGMA_TOKEN=<personalAccessToken>\n```\n\n> You can use [dotenv](https://www.npmjs.com/package/dotenv) or `export` the variable using `.bash_profile`/`.bashrc` file.\n\n## Just Try\n\nIf you wanna try it just run following command and you will be able to download all components from https://www.figma.com/file/RSzpKJcnb6uBRQ3rOfLIyUs5 as .svg :sunglasses:\n\n```sh\n# export figma token\nexport FIGMA_TOKEN=<personalAccessToken>\n\n# export figma components as svg\nnpx -p @figma-export/cli -p @figma-export/output-components-as-svg figma-export components RSzpKJcnb6uBRQ3rOfLIyUs5 -O @figma-export/output-components-as-svg\n```\n\n## Packages\n\n### [@figma-export/core](https://github.com/marcomontalbano/figma-export/raw/master/packages/core)\n\nThis package contains the core functionalities for `figma-export`. You can download and use it as a dependency of your project.\n\n### [@figma-export/cli](https://github.com/marcomontalbano/figma-export/raw/master/packages/cli)\n\nThis package allows you to consume all core functionalities from your terminal.\n\n## Usage\n\nTypically you'll prefer to use the `cli`. Here different ways to do the same:\n\n### Build Process\n\nYou can use `figma-export` as part of your build process.\n\n```sh\nnpm install --save-dev @figma-export/cli @figma-export/output-components-as-svg\n\n# or using `yarn`\nyarn add @figma-export/cli @figma-export/output-components-as-svg --dev\n```\n\nNow you can create a `script` command inside your `package.json`.\n\nFollowing an example:\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"figma-export components RSzpKJcnb6uBRQ3rOfLIyUs5 -O @figma-export/output-components-as-svg\"\n  }\n}\n```\n\n### Use it on the fly\n\nAlternatively you can use `npx` to use it on the fly:\n\n```sh\nnpx @figma-export/cli help\n```\n\n### Global Setup\n\nYou can also install it as a global dependency:\n\n```sh\nnpm install -g @figma-export/cli\n\n# or using `yarn`\nyarn add @figma-export/cli --global\n```\n\n```sh\nfigma-export help\n```\n\n### Advanced\n\nLast but not least, you can create a configuration file and use a single command *to rule them all* :ring:\n\nLet's create the file `.figmaexportrc.js` and paste the following:\n\n```js\nmodule.exports = {\n\n    commands: [\n        ['components', {\n            fileId: 'RSzpKJcnb6uBRQ3rOfLIyUs5',\n            onlyFromPages: ['icons', 'monochrome'],\n            transformers: [\n                require('@figma-export/transform-svg-with-svgo')({\n                    plugins: [\n                        { removeViewBox: false },\n                        { removeDimensions: true }\n                    ]\n                })\n            ],\n            outputters: [\n                require('@figma-export/output-components-as-svg')({\n                    output: './output'\n                })\n            ]\n        }]\n    ]\n\n};\n```\n\nnow you can install the `@figma-export` dependencies that you need\n\n```sh\nnpm install --save-dev @figma-export/cli @figma-export/transform-svg-with-svgo @figma-export/output-components-as-svg\n```\n\nand update the `package.json`.\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"figma-export use-config\"\n  }\n}\n```\n\nIf needed you can also provide a different configuration file.\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"figma-export use-config .figmaexportrc.production.js\"\n  }\n}\n```\n"
      }
    }
  },
  {
    "name": "test-nonce",
    "description": "Very small demo to test \"nonce\"",
    "url": "https://github.com/marcomontalbano/test-nonce",
    "homepageUrl": "https://test-nonce.herokuapp.com/",
    "createdAt": "2019-11-04T18:45:31Z",
    "updatedAt": "2020-04-08T08:11:37Z",
    "pushedAt": "2020-04-08T08:11:34Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://avatars1.githubusercontent.com/u/1681269?s=400&v=4",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "nonce"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "csp"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "test-nonce",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "repositoryTopics": [
        "nonce",
        "csp"
      ],
      "cover": {
        "url": "https://github.com/marcomontalbano/test-nonce/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "url": "https://github.com/marcomontalbano/test-nonce/raw/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# test-nonce"
      }
    }
  }
]
