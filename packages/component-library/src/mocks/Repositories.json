[
  {
    "name": "common-utils",
    "description": "A set of common utilities internally used in Commerce Layer.",
    "url": "https://github.com/commercelayer/common-utils",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "",
    "createdAt": "2022-09-22T13:45:50Z",
    "updatedAt": "2022-11-03T14:16:08Z",
    "pushedAt": "2022-11-03T15:29:04Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/9db9e467dfbe74d525b495d340be89f63a7b038ff0af0e60dc84362e0ad43417/commercelayer/common-utils",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": []
    },
    "customFields": {
      "title": "common-utils",
      "visible": false,
      "starCount": 1,
      "forkCount": 0,
      "defaultBranch": "main",
      "repositoryTopics": [],
      "cover": {
        "originalUrl": "https://github.com/commercelayer/common-utils/raw/main/cover.png",
        "url": "https://github.com/commercelayer/common-utils/raw/main/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/commercelayer/common-utils/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/commercelayer/common-utils/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# common-utils\n\n> A set of common utilities internally used in Commerce Layer.\n"
      }
    }
  },
  {
    "name": "demo-store",
    "description": "Demo Store is a completely static ecommerce solution (with SSR capability) powered by Commerce Layer.",
    "url": "https://github.com/commercelayer/demo-store",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://commercelayer.github.io/demo-store-core",
    "createdAt": "2022-08-05T19:39:54Z",
    "updatedAt": "2022-10-15T19:51:07Z",
    "pushedAt": "2022-11-03T20:02:42Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": true,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/fb2eca66982dfa56d39495543621d7f5287678ddef953405fd41901172dad7a0/commercelayer/demo-store",
    "stargazers": {
      "totalCount": 15
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "ecommerce"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ssg"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ssr"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "static-site"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Commerce Layer Demo Store",
      "visible": false,
      "starCount": 15,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "ecommerce",
        "ssg",
        "ssr",
        "static-site"
      ],
      "cover": {
        "originalUrl": "https://github.com/commercelayer/demo-store/raw/master/cover.png",
        "url": "https://github.com/commercelayer/demo-store/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/commercelayer/demo-store/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/commercelayer/demo-store/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Commerce Layer Demo Store\n\nThis Demo Store is a completely static ecommerce solution (with SSR capability) powered by Commerce Layer. The store is [full-featured](#features) and fully operational, with no third-party services required. You can easily tailor your own with different levels of customization. Keep reading to learn more.\n\n> The Demo Store project consists of [two repositories](#how-it-works), this one is the GitHub template.\n\n## What is Commerce Layer?\n\n[Commerce Layer](https://commercelayer.io/) is a multi-market commerce API and order management system that lets you add global shopping capabilities to any website, mobile app, chatbot, wearable, voice, or IoT device, with ease. Compose your stack with the best-of-breed tools you already mastered and love. Make any experience shoppable, anywhere, through a blazing-fast, enterprise-grade, and secure API.\n\n## Table of contents\n\n- [Features](#features)\n- [How it works](#how-it-works)\n- [Getting started](#getting-started)\n- [Customization](#customization)\n- [Deploy](#deploy)\n- [Need help?](#need-help)\n- [Troubleshooting](#troubleshooting)\n- [License](#license)\n\n## Features\n\nWe decided to build the Demo Store removing all third-party services that are usually used to create a comprehensive ecommerce website experience (CMS, search, PIM, etc.).\n\nEverything related to [content](https://commercelayer.io/docs/core-concepts/content-vs-commerce) is stored as JSON files. To build your own Demo Store you will need to create these files manually or via scripts.\n\nThe Demo Store comes with:\n\n- [x] a built-in search engine with facet search powered by [fuse.js](https://github.com/krisk/Fuse)\n- [x] a full product catalog management with taxonomies and taxons\n- [x] single product variants management\n- [x] multi-language capabilities to make selling internationally easier\n- [x] the whole extensive set of features provided out of the box by Commerce Layer APIs (multiple currency price lists, inventory models that support multiple stock locations and fulfillment strategies, market-specific payment gateways, delivery options and carrier accounts, etc.)\n\nThe integration with Commerce Layer is achieved by leveraging some of our open-source [developer tools](https://commercelayer.io/developers), specifically:\n\n- the [React components](https://github.com/commercelayer/commercelayer-react-components)\n- the embedded version of our [Hosted cart](https://github.com/commercelayer/commercelayer-cart#embedding-the-cart)\n- the [Hosted checkout](https://github.com/commercelayer/commercelayer-react-checkout)\n\n## How it works\n\nThe Demo Store project consists of two repositories that you can leverage to build your own store, based on the amount of customization you need to add:\n\n- [`demo-store`](https://github.com/commercelayer/demo-store)\n\n  This is a **GitHub template** that uses the below-mentioned `demo-store-core` as a [git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules). If you're happy with the features and the look and feel of the Commerce Layer Demo Store we suggest you follow this path. You won't have to care about the whole source code and you'll be free to focus just on [your data and content](#customization). On top of that, you'll get free updates with almost no risk just by running:\n\n  ```sh\n  git submodule update --remote\n  npm install\n  ```\n\n- [`demo-store-core`](https://github.com/commercelayer/demo-store-core)\n\n  This repository contains the source code. If you need to fully customize your store (behavior, UI, UX, etc.) you just have to fork this repo and create your own. **This is also the way to contribute.**\n\n  > :warning: Please note that if you follow this path and start diverging too much from the original source code the risk is to lose all future updates or not be able to replicate them.\n\n## Getting started\n\nIf you have no experience with Commerce Layer, you can start by creating an account (it's free!) and following the [onboarding tutorial](https://docs.commercelayer.io/developers/welcome/onboarding-tutorial).\n\n> :information_source: Please note that to set up a Demo Store you need a properly configured organization with at least a few products and one market.\n\nIf you prefer to start from scratch, you can create a new organization and use the following commands to configure a Commerce Layer's Demo Store-like project.\n\n### Setting up your organization\n\nOnce the organization is created, you need to create two [API clients](https://docs.commercelayer.io/developers/api-clients): a **sales channel** and an **integration**.\n\nIf you haven't yet, install the [Commerce Layer CLI](https://github.com/commercelayer/commercelayer-cli) and two of its plugins: the [seeder plugin](https://github.com/commercelayer/commercelayer-cli-plugin-seeder) and the [imports plugin](https://github.com/commercelayer/commercelayer-cli-plugin-imports):\n\n```sh\nnpm install -g @commercelayer/cli\n\ncommercelayer plugins:install seeder\ncommercelayer plugins:install imports\n```\n\nNow you can log in to your integration API client from the CLI:\n\n```sh\ncommercelayer applications:login \\\n  --clientId Oy5F2TbPYhOZsxy1tQd9ZVZ... \\\n  --clientSecret 1ZHNJUgn_1lh1mel06gGDqa... \\\n  --organization my-awesome-organization \\\n  --alias cli-admin\n```\n\n### Building your store\n\nOnce your organization is set up, to build you store you need to follow some simple steps... let's get started!\n\n#### 1. Create a new repository\n\nWhichever [path](#how-it-works) you choose, first of all, you need to create a new repository for your store:\n\n- If you decided to keep the `demo-store` template you just need to click on the _\"Use this template\"_ from the [repository homepage](https://github.com/commercelayer/demo-store) on GitHub and then run:\n\n  ```sh\n  git clone <your-repository-url> my-new-project\n  cd my-new-project\n  git submodule update --init\n  npm install\n\n  cp ./demo-store-core/packages/website/.env.sample.submodule .env.local\n\n  cp -r ./demo-store-core/packages/website/data/json ./data/json\n  ```\n\n- If you decided to fork the `demo-store-core` [repository](https://github.com/commercelayer/demo-store-core) you can run this instead:\n\n  ```sh\n  git clone <your-repository-url> my-new-project\n  cd my-new-project\n  npm install\n\n  cp ./packages/website/.env.sample ./packages/website/.env.local\n  ```\n\n#### 2. Set the environment variables\n\nEdit `.env.local` and fill in all the missing information:\n\n```properties\n# this is the 'sales channel' client id\nNEXT_PUBLIC_CL_CLIENT_ID=er34TWFcd24RFI8KJ52Ws6q...\n\n# this is the 'base endpoint'\nNEXT_PUBLIC_CL_ENDPOINT=https://my-awesome-organization.commercelayer.io\n```\n\n#### 3. Seed the data\n\nThe following script will populate your organization with all the resources you need to build a multi-market ecommerce with Commerce Layer (the ones we are using for our [Demo Store](https://commercelayer.github.io/demo-store-core)).\n\n```sh\nnpm run seeder:seed -ws --if-present\n```\n\n> :information_source: This step is optional. If you already have a properly configured organization on your Commerce Layer account, you can skip it.\n\n#### 4. Choose the countries where you're going to sell\n\nThe `json/countries.json` file contains a list of available countries for your ecommerce. You can change it with your preferred editor. Just make sure to replace all findings of `\"market\": xxx` with the related markets of your organization. You can get the list of your markets from the Commerce Layer admin dashboard or by running this command:\n\n```sh\nnpm run markets -ws --if-present\n```\n\n#### 5. See it in action :rocket:\n\n```sh\nnpm run dev\n\n# http://localhost:3000/\n```\n\n## Customization\n\nWhen you're using our Demo Store template you can customize three main elements: content data, locales, and configuration files.\n\n> :warning:  We're going to continuously improve our Demo Store to add new features and optimize the existing ones. When you update to the latest release, the build could fail. Take a look at the release notes to understand how to fix it by updating your customized files.\n\n### JSON data files\n\nAs mentioned earlier, our Demo Store is built around a set of data that are stored as JSON files, to decouple it from any third-party services. To build your store you'll have to create and manage these files.\n\nJSON files are located at `data/json/`, but you can choose a different position by changing the environment variable `NEXT_PUBLIC_JSON_DATA_FOLDER`.\n\nType-definition files are located at `packages/types/src/json/`. We are using [zod](https://github.com/colinhacks/zod) for schema validation. Take a look at these files to understand which structure you have to follow.\n\nWhen you are done with all the changes you can check if everything is correct by running:\n\n```\nnpm run test:data\n```\n\n### Locale data files\n\nOur Demo Store is a multi-language website. When you built your data in the previous step, you probably noticed that some fields were localized. You can add new languages or change existing translations.\n\nLocale JSON files are located at `data/locales/`, but you can choose a different position by changing the environment variable `NEXT_PUBLIC_LOCALES_DATA_FOLDER`.\n\nDo as follows to start customizing the locales:\n\n```sh\ncp -r ./demo-store-core/packages/website/data/locales ./data/locales\n```\n\n```properties\n# .env.local\nNEXT_PUBLIC_LOCALES_DATA_FOLDER=../../../data/locales/\n```\n\n### Configuration files\n\nConfiguration files are located at `config/`, but you can choose a different position by changing the environment variable `NEXT_PUBLIC_CONFIG_FOLDER`.\n\nThere are three configuration files that you can manage:\n\n- `general.config.js`  \n  This file contains the general configuration.\n\n- `facets.config.js`  \n  This is the facets configuration file. You can choose the order in which they are displayed in the filter panel, their appearance, and the sorting rules of their values.  \n  <img width=\"400\" alt=\"demo-store-facets\" src=\"https://user-images.githubusercontent.com/1681269/184152000-2163e484-d4bd-441a-b3cb-20c3b03b875a.png\">\n\n- `variants.config.js`  \n  This is the variants configuration file. You can choose the order in which they are displayed on the product detail page and their appearance.  \n  <img width=\"180\" alt=\"demo-store-product-variants\" src=\"https://user-images.githubusercontent.com/1681269/184152670-bdd5ea2b-d30f-42e8-b5a7-6c541396cd90.png\">\n\nDo as follows to start customizing the configuration:\n\n```sh\ncp -r ./demo-store-core/packages/website/config ./config\n```\n\n```properties\n# .env.local\nNEXT_PUBLIC_CONFIG_FOLDER=../../../config/\n```\n\n### Additional environment variables\n\nThere are some environment variables that you can use to customize your store. For an exhaustive list and description, you can take a look at [additional-env.d.ts](https://github.com/commercelayer/demo-store-core/blob/master/packages/website/additional-env.d.ts) file.\n\n## Deploy\n\nYou can deploy the Demo Store wherever you prefer. You just need to:\n\n1. Set all the environment variables in the system that you'll use to run the build, according to your needs.\n2. Decide if you want to go with [static site generation](#static-site-generation) or [server-side rendering](#server-side-rendering).\n\n> :information_source: The Demo Store is designed to be SSG first and foremost, but you can switch to SSR in a snap. We tested some ways to deploy it (e.g. using GitHub Workflow, Netlify, Vercel, etc.) and you can find more information about it [here](https://github.com/commercelayer/demo-store/blob/master/DEPLOY.md). If you did it differently or used other services and you want to share the steps with the community, please [join the discussion](https://github.com/commercelayer/demo-store-core/discussions/new?category=show-and-tell), and thanks in advance!\n\n### Static site generation\n\nTo build and deploy the Demo Store:\n\n1. Set the following environment variable accordingly:\n\n   ```properties\n   NEXT_PUBLIC_DATA_FETCHING=ssg\n   ```\n\n2. Run `npm run export` to create a statically optimized production build of your application.\n3. Copy the folder `demo-store-core/packages/website/out` to your preferred static hosting.\n\n### Server-side rendering\n\nThe Demo Store can be deployed to any hosting provider that supports Node.js. To do that:\n\n1. Set the following environment variable accordingly:\n\n   ```properties\n   NEXT_PUBLIC_DATA_FETCHING=ssr\n   ```\n\n2. Run `npm run build` to create an optimized production build of your application.\n3. Run `npm start` to start the Node.js server in production mode.\n\n## Need help?\n\n- Join [Commerce Layer's Slack community](https://slack.commercelayer.app).\n- Open a new [Q&A discussion](https://github.com/commercelayer/demo-store-core/discussions/categories/q-a)\n- Ping us [on Twitter](https://twitter.com/commercelayer).\n- Is there a bug? Create an [issue](https://github.com/commercelayer/demo-store-core/issues) on this repository.\n\n## Troubleshooting\n\n1. **Q.** Even if I changed `NEXT_PUBLIC_JSON_DATA_FOLDER`, `NEXT_PUBLIC_LOCALE_DATA_FOLDER` or `NEXT_PUBLIC_CONFIG_FOLDER`, the website is still referring to previous files.\n\n   **A.** These environment variables are used as `alias` in Webpack. Starting from Webpack 5, caching for faster builds has been introduced. Changing these environment variables will not invalidate the Webpack cache. You have to remove `.next` folder manually or by running:\n\n   ```sh\n   # update the path if needed\n   rm -rf demo-store-core/packages/website/.next/\n   ```\n\n## License\n\nThis repository is published under the [MIT](https://github.com/commercelayer/demo-store/blob/master/LICENSE) license.\n"
      }
    }
  },
  {
    "name": "demo-store-core",
    "description": "Commerce Layer Demo Store CORE",
    "url": "https://github.com/commercelayer/demo-store-core",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://commercelayer.github.io/demo-store-core",
    "createdAt": "2022-04-01T14:23:17Z",
    "updatedAt": "2022-11-03T16:34:45Z",
    "pushedAt": "2022-11-03T19:50:29Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/62b5a360a26cbdedac936f89339d446c5ce548fb4d57aa45d83b352eaa634129/commercelayer/demo-store-core",
    "stargazers": {
      "totalCount": 4
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "ecommerce"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ssg"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ssr"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "static-site"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "demo-store-core",
      "visible": false,
      "starCount": 4,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "ecommerce",
        "ssg",
        "ssr",
        "static-site"
      ],
      "cover": {
        "originalUrl": "https://github.com/commercelayer/demo-store-core/raw/master/cover.png",
        "url": "https://github.com/commercelayer/demo-store-core/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/commercelayer/demo-store-core/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/commercelayer/demo-store-core/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Commerce Layer Demo Store `core`\n\nThis Demo Store is a completely static ecommerce solution (with SSR capability) powered by Commerce Layer. The store is full-featured and fully operational, with no third-party services required. You can easily tailor your own with different levels of customization. Keep reading to learn more.\n\n> The Demo Store project consists of [two repositories](#how-it-works), this one contains the source code.\n\n## What is Commerce Layer?\n\n[Commerce Layer](https://commercelayer.io/) is a multi-market commerce API and order management system that lets you add global shopping capabilities to any website, mobile app, chatbot, wearable, voice, or IoT device, with ease. Compose your stack with the best-of-breed tools you already mastered and love. Make any experience shoppable, anywhere, through a blazing-fast, enterprise-grade, and secure API.\n\n## Table of contents\n\n- [How it works](#how-it-works)\n- [Getting started](#getting-started)\n- [Need help?](#need-help)\n- [License](#license)\n\n## How it works\n\nThe Demo Store project consists of two repositories that you can leverage to build your own store, based on the amount of customization you need to add:\n\n- [`demo-store`](https://github.com/commercelayer/demo-store)\n\n  This is a **GitHub template** that uses the below-mentioned `demo-store-core` as a [git submodule](https://git-scm.com/book/en/v2/Git-Tools-Submodules). If you're happy with the features and the look and feel of the Commerce Layer Demo Store we suggest you follow this path. You won't have to care about the whole source code and you'll be free to focus just on [your data and content](#customization). On top of that, you'll get free updates with almost no risk just by running:\n\n  ```sh\n  git submodule update --remote\n  npm install\n  ```\n\n- [`demo-store-core`](https://github.com/commercelayer/demo-store-core)\n\n  This repository contains the source code. If you need to fully customize your store (behavior, UI, UX, etc.) you just have to fork this repo and create your own. **This is also the way to contribute.**\n\n  > :warning: Please note that if you follow this path and start diverging too much from the original source code the risk is to lose all future updates or not be able to replicate them.\n\n## Getting started\n\nTo get started please refer to the [documentation](https://github.com/commercelayer/demo-store) located at `demo-store` repository.\n\n## Need help?\n\n- Join [Commerce Layer's Slack community](https://slack.commercelayer.app).\n- Open a new [Q&A discussion](https://github.com/commercelayer/demo-store-core/discussions/categories/q-a)\n- Ping us [on Twitter](https://twitter.com/commercelayer).\n- Is there a bug? Create an [issue](https://github.com/commercelayer/demo-store-core/issues) in this repository.\n\n## License\n\nThis repository is published under the [MIT](https://github.com/commercelayer/demo-store-core/blob/master/LICENSE) license.\n"
      }
    }
  },
  {
    "name": "figma-plugin-run-github-actions-workflows",
    "description": "Run GitHub Actions workflows from Figma sending the selected page and all selected nodes as inputs.",
    "url": "https://github.com/marcomontalbano/figma-plugin-run-github-actions-workflows",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "https://www.figma.com/community/plugin/1096890502176164513",
    "createdAt": "2022-03-28T18:47:50Z",
    "updatedAt": "2022-05-26T17:03:21Z",
    "pushedAt": "2022-04-15T22:40:05Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/9524a4b988eea1942106348a131ff2ad20d38a9ce1eff3806dd7029cecc3a21c/marcomontalbano/figma-plugin-run-github-actions-workflows",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "figma"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "figma-plugin"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "trigger"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "automation"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-actions"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-workflows"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Figma Plugin - Run GitHub Actions workflows",
      "visible": true,
      "starCount": 1,
      "forkCount": 1,
      "defaultBranch": "main",
      "repositoryTopics": [
        "figma",
        "figma-plugin",
        "trigger",
        "automation",
        "github-actions",
        "github-workflows"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/figma-plugin-run-github-actions-workflows/raw/main/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/figma-plugin-run-github-actions-workflows/main/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/figma-plugin-run-github-actions-workflows/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/figma-plugin-run-github-actions-workflows/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Figma Plugin - Run GitHub Actions workflows\n\nRun [GitHub Actions](https://github.com/features/actions) workflows from [Figma](https://www.figma.com/) sending the selected page and all selected nodes as [inputs](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs).\n\n![Demo](https://github.com/marcomontalbano/figma-plugin-run-github-actions-workflows/raw/main/cover.gif)\n\n\n## Usage\n\n### Figma\n\nSetup on Figma is straightforward. You just need to setup a new workflow clicking on the `+` button. You'll need a GitHub [Access Token](https://github.com/settings/tokens) to run workflows.\n\nAfter that, you can select a `page` and one or more `nodes` from that page and click on `▶`. This will run the selected workflow, passing your selection as workflow' inputs.\n\n### GitHub\n\nBefore running a workflow for the first time, you'll need to properly setup a [GitHub Actions workflow](https://docs.github.com/en/actions/using-workflows) :smiley:.\n\nThe GitHub Actions workflow needs to have a set of inputs (the same that the plugin will send):\n\n```yaml\non: \n  workflow_dispatch:\n    inputs:\n      fileKey:\n        description: Figma file key\n        type: string\n        required: true\n      page:\n        description: Stringified selected page (id, name)\n        type: string\n        default: '{}'\n        required: true\n      selection:\n        description: Stringified array of the selected nodes (id, name)\n        type: string\n        default: '[]'\n        required: true\n```\n\nAside from this, you'll just need to configure the workflow as you prefer.\n\nCheckout a working example [`from-figma.yaml`](https://github.com/marcomontalbano/figma-plugin-run-github-actions-workflows/blob/main/github/workflows/from-figma.yaml).\n\nAs you can see inside the above example, you can also transform/manipulate the received inputs in order to shape them as you want.\n\n\n## Figma Export PDFs\n\nWhat do you think about *exporting Figma content as PDF to an FTP Server, just clicking a button from Figma*? Would it be cool, isn't it?\n\nTake a look at this [workflow](https://github.com/marcomontalbano/figma-export-pdfs-action/blob/main/.github/workflows/from-figma.yaml) and find out how this is totally feasible. Just clone the workflow and setup this Figma plugin :wink:\n"
      }
    }
  },
  {
    "name": "figma-export-pdfs-action",
    "description": "Export content from a Figma file as PDF.",
    "url": "https://github.com/marcomontalbano/figma-export-pdfs-action",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "",
    "createdAt": "2022-03-17T22:31:14Z",
    "updatedAt": "2022-11-02T13:02:08Z",
    "pushedAt": "2022-11-03T12:24:57Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/4917603236778d3a222025564cbd39cebb68e73b8f31edf70435144b3ad6c741/marcomontalbano/figma-export-pdfs-action",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "figma"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "figma-export"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "pdf"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-action"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Figma Export PDFs action",
      "visible": false,
      "starCount": 2,
      "forkCount": 0,
      "defaultBranch": "main",
      "repositoryTopics": [
        "figma",
        "figma-export",
        "pdf",
        "github-action"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/figma-export-pdfs-action/raw/main/cover.png",
        "url": "https://github.com/marcomontalbano/figma-export-pdfs-action/raw/main/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/figma-export-pdfs-action/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/figma-export-pdfs-action/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Figma Export PDFs action\n\nThis action is able to export content from a Figma file as PDF.\nThen you can save the pdf as workflow artifact, upload it to an ftp server, or do whatever you want.\n\n## Figma file structure\n\nIn order to export a pdf from a Figma file, it have to be structured in a specific way.\n\n```sh\nFigma page\n|\n├── group # this is a pdf\n│   ├── frame # page 1\n│   ├── frame # page 2\n│   └── frame # page 3\n|\n└── group # this is another pdf\n    ├── frame # page 1\n    └── frame # page 2\n```\n\nA pdf page have to be a `figma frame`, and pages have to be grouped with a `figma group`.\nYou can take a look at [this example](https://www.figma.com/file/VQxKo2pnaksjE7Vql999Qv/figma-export-pdfs-action?node-id=138%3A28).\n\n\n## Usage\n\n```yml\n- name: Figma Export PDFs\n  id: figmaExportPdfs\n  uses: marcomontalbano/figma-export-pdfs-action@v1.2.2\n  with:\n    accessToken: ${{ secrets.FIGMA_ACCESS_TOKEN }}\n    fileKey: VQxKo2pnaksjE7Vql999Qv\n    ids: [\"120:3\",\"138:28\"]\n\n- name: Log\n  echo \"pdfs: $pdfs\"\n  echo \"outDir: $outDir\"\n  env:\n    pdfs: ${{ steps.figmaExportPdfs.outputs.pdfs }}\n    outDir: ${{ steps.figmaExportPdfs.outputs.outDir }}\n```\n\nCheckout a working example [`dispatch.yaml`](https://github.com/marcomontalbano/figma-export-pdfs-action/blob/main/github/workflows/dispatch.yaml).\n\n### Inputs\n\n| Key           | Required | Description                               | Example                                    | Default |\n|---------------|:--------:|-------------------------------------------|--------------------------------------------|:-------:|\n| `accessToken` |  **yes** | Figma access token                        | xxxxx-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx |         |\n| `fileKey`     |  **yes** | Figma file key                            | rAJHsSg4SC5NqFIFib5NWz                     |         |\n| `ids`         |    no    | List of ids to export. Default to *all*   | [\"17:786\", \"6:786\"]                        |   [ ]   |\n\n\n### Outputs\n\n| Key      | Description                                | Example |\n|----------|--------------------------------------------|---------|\n| `pdfs`   | List of exported pdfs                      | *       |\n| `outDir` | Output directory for all emitted pdf files | ./dist/ |\n\n> **\\*** For example a `pdfs` could looks like the following:\n> \n> ```json\n> [\n>   {\n>     \"id\": \"6:786\",\n>     \"name\": \"figma-export-cover\",\n>     \"basename\": \"figma-export-cover.pdf\",\n>     \"filepath\": \"./dist/figma-export-cover.pdf\",\n>     \"cover\": \"./dist/figma-export-cover.jpg\"\n>   }\n> ]\n> ```\n\n\n## Live Example\n\nI created a `cron.yaml` workflow that runs scheduled.\n\nThis workflow will export the page \"cover\" and the page \"unit-test\" from [this Figma file](https://www.figma.com/file/VQxKo2pnaksjE7Vql999Qv).\n\nYou can check the latest run from [this page](https://github.com/marcomontalbano/figma-export-pdfs-action/actions/workflows/cron.yaml) and look at the logs.\nAn artifact called `my-pdfs` is also available for logged user so that you can check what's the final result.\n\n\n\n## Export PDFs directly from Figma\n\nWhat do you think about exporting Figma content as PDF to an FTP Server, just clicking a button from Figma? Would it be cool, isn't it?\n\nTake a look at this [workflow](https://github.com/marcomontalbano/figma-export-pdfs-action/blob/main/github/workflows/from-figma.yaml) and find out how this is totally feasible. Just clone the workflow and setup [this Figma plugin](https://www.figma.com/community/plugin/1096890502176164513) 😉\n\n![Demo](https://raw.githubusercontent.com/marcomontalbano/figma-plugin-run-github-actions-workflows/main/cover.gif)\n"
      }
    }
  },
  {
    "name": "contentful-migration-tool",
    "description": "Run Contentful migrations easier.",
    "url": "https://github.com/marcomontalbano/contentful-migration-tool",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "",
    "createdAt": "2021-02-26T16:46:24Z",
    "updatedAt": "2022-03-12T01:21:08Z",
    "pushedAt": "2022-01-03T17:39:42Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": true,
    "openGraphImageUrl": "https://repository-images.githubusercontent.com/342638983/44a8b11f-3fab-4a5f-94f8-7e7a9485523e",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "docker"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "contentful"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "migration"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cli"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Contentful Migration Tool",
      "visible": true,
      "starCount": 2,
      "forkCount": 1,
      "defaultBranch": "main",
      "repositoryTopics": [
        "docker",
        "jest",
        "typescript",
        "contentful",
        "migration",
        "cli"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/contentful-migration-tool/raw/main/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/contentful-migration-tool/main/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/contentful-migration-tool/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/contentful-migration-tool/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Contentful Migration Tool\n\n[![Test](https://github.com/marcomontalbano/contentful-migration-tool/actions/workflows/test.yml/badge.svg)](https://github.com/marcomontalbano/contentful-migration-tool/actions/workflows/test.yml)\n[![Npm](https://img.shields.io/npm/v/contentful-migration-tool.svg?logo=npm&style=flat&label=version)](https://www.npmjs.com/package/contentful-migration-tool)\n[![Docker](https://img.shields.io/docker/v/marcomontalbano/contentful-migration.svg?logo=docker&logoColor=white&style=flat)](https://hub.docker.com/r/marcomontalbano/contentful-migration)\n\nRun Contentful migrations easier.\n\n## Why another CLI?\n\nI decided to created this CLI when I read this article: \"[Integrating migrations in a continuous delivery pipeline with CircleCI](https://www.contentful.com/developers/docs/tutorials/general/continuous-integration-with-circleci/)\". I found that approach very interesting, so I decided to build something very close to that.\n\nWith this CLI you can run migrations easier and keep track of migrations that you have already run.\n\nYou can integrate this into your existing CI without any effort.\n\n\n## CLI usage\n\nThe official [`contentful-migration`](https://github.com/contentful/contentful-migration) is a peerDependency, so it is required.\n\nYou can run directly this command:\n\n```sh\nnpx -p contentful-migration@latest -p contentful-migration-tool contentful-migration-tool run ./migrations\n```\n\nOr you can install **contentful-migration** and **contentful-migration-tool** as devDependencies and then just run:\n\n```sh\n# install dependencies\nnpm install --save-dev contentful-migration@latest contentful-migration-tool\n\n# run migrations\nnpx contentful-migration-tool run ./migrations\n```\n\nIf you use **TypeScript**, you will also need **ts-node** to run TypeScript migrations:\n\n```sh\n# install dependencies\nnpm install --save-dev contentful-migration@latest contentful-migration-tool ts-node\n\n# run migrations\nnpx ts-node ./node_modules/.bin/contentful-migration-tool run ./migrations\n```\n\nRemember to set the required environment variables before running the above commands.\n\n### Options\n\n#### Environment Variables\n\n* **`CONTENT_MANAGEMENT_TOKEN`** - ***required*** - Contentful Content Management Token. You can create one from the section *API keys* under your space settings.\n\n* **`SPACE_ID`** - ***required*** - Contentful Space ID. You can get the Space ID from the section *General settings* under your space settings. The Space ID is also visibile in the url.\n\n* **`ENVIRONMENT_ID`** - ***required*** - Contentful Environment ID.\n\n## Docker usage\n\nWith this Docker image you don't even need Node.js\n\n```sh\ndocker run --rm --name contentful-migration-runner -e CONTENT_MANAGEMENT_TOKEN=$CONTENT_MANAGEMENT_TOKEN -e SPACE_ID=$SPACE_ID -e ENVIRONMENT_ID=$ENVIRONMENT_ID -v $(pwd)/migrations:/app/migrations marcomontalbano/contentful-migration\n```\n\n### Options\n\n#### Environment Variables\n\n* **`CONTENT_MANAGEMENT_TOKEN`** - ***required*** - Contentful Content Management Token. You can create one from the section *API keys* under your space settings.\n\n* **`SPACE_ID`** - ***required*** - Contentful Space ID. You can get the Space ID from the section *General settings* under your space settings. The Space ID is also visibile in the url.\n\n* **`ENVIRONMENT_ID`** - ***required*** - Contentful Environment ID.\n\n#### Volumes\n\n* **`/app/migrations`** - ***required*** - Migrations folder.\n\n#### Arguments\n\n* **`--cfmversion 4.0.0`** - ***optional*** - Use this argument if you want to change the `contentful-migration` version. (default to `latest`)\n\n\n## Migrations folder\n\nEither you use **Docker** or **CLI**, you should create a `/migrations` (or whatever name) folder. This folder will contain all your migration description files.\n\nA migration description file is a `.js` or `.ts` file that contains a migration script. This scripts are written using [Contentful Migration](https://github.com/contentful/contentful-migration) syntax *which you are already familiar with*.\n\nThe filename must follow this naming convention:\n\n**`<version>` `-` `<description>`** `.ts`\n\n**version** starts from `1` and must be incremental.\n\n**description** is used to easily recognize the purpose of the migration.\n\nA real example can be: `1-create-author.ts`\n\n----\n\ne.g. `javascript`\n\n```js\nmodule.exports = function (migration, context) {\n  const author = migration.createContentType('author');\n  const name = author.createField('name');\n  name.type('Symbol').required(true);\n};\n```\n\ne.g. `typescript`\n\n```ts\nimport { MigrationFunction } from 'contentful-migration'\n\nconst migrate: MigrationFunction = (migration) => {\n  const author = migration.createContentType('author');\n  const name = author.createField('name');\n  name.type('Symbol').required(true);\n}\n\nexport = migrate\n```\n\n## Useful Readings\n\n* [Contentful Migration](https://github.com/contentful/contentful-migration)\n* [Contentful • CMS as code](https://www.contentful.com/help/cms-as-code/)\n* [Contentful • Scripting migrations with the Contentful CLI](https://www.contentful.com/developers/docs/tutorials/cli/scripting-migrations/)\n"
      }
    }
  },
  {
    "name": "netlify-cms-json-exporter",
    "description": "Export all your Netlify CMS contents in a single object with all relations resolved.",
    "url": "https://github.com/marcomontalbano/netlify-cms-json-exporter",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "",
    "createdAt": "2021-02-03T07:21:14Z",
    "updatedAt": "2022-01-25T21:24:28Z",
    "pushedAt": "2022-02-02T08:01:28Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/481b50ec7970e5f104def228f8d666e97b12b1bf655df7e863da817a382673d3/marcomontalbano/netlify-cms-json-exporter",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "netlify-cms"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cms"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "json"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "export"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "uvu"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "c8"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Netlify CMS - JSON Exporter",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "main",
      "repositoryTopics": [
        "netlify-cms",
        "netlify",
        "cms",
        "json",
        "export",
        "typescript",
        "uvu",
        "c8"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/netlify-cms-json-exporter/raw/main/cover.png",
        "url": "https://github.com/marcomontalbano/netlify-cms-json-exporter/raw/main/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/netlify-cms-json-exporter/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/netlify-cms-json-exporter/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Netlify CMS - JSON Exporter\n\n[Netlify CMS](https://www.netlifycms.org/) stores the content in separate folders and files.\nWith `JSON Exporter` you can export all your Netlify CMS contents in a single object with all relations resolved.\n\nThis can be useful if need to inject your content as `props` inside your components.\n\n## Usage\n\n```sh\n# with yarn\nyarn add -D netlify-cms-json-exporter\n\n# with npm\nnpm install --save-dev netlify-cms-json-exporter\n```\n\n### Export as `db.json`\n\n```js\nimport fs from 'fs'\nimport { getContent } from 'netlify-cms-json-exporter'\n\nconst content = getContent('./public/admin/config.yml', './content')\n\nfs.writeFileSync('db.json', JSON.stringify(content, undefined, 2))\n```\n\n### Typescript `.d.ts`\n\n```js\n// netlify-cms-exporter.js\n\nimport { getContent } from 'netlify-cms-json-exporter'\n\nconst content = getContent('./public/admin/config.yml', './content')\n\nconsole.log(\n  JSON.stringify(content, undefined, 2)\n)\n```\n\n```sh\nnode netlify-cms-exporter.js | npx json-ts --stdin --prefix \"\" --rootName Content > db.d.ts\n```\n"
      }
    }
  },
  {
    "name": "poc-socket",
    "description": "Just one socket server used by many apps/games",
    "url": "https://github.com/marcomontalbano/poc-socket",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://www.marcomontalbano.com/poc-socket",
    "createdAt": "2021-01-20T22:35:59Z",
    "updatedAt": "2021-12-10T08:56:03Z",
    "pushedAt": "2021-12-10T09:02:34Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/2703fb1d00ad7e69385077d5f8b0e4fdd924d10a0375191e6777decc0c760bbd/marcomontalbano/poc-socket",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "web-sockets"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "socket"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jest"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "POC –&nbsp;Socket",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "web-sockets",
        "socket",
        "jest"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/poc-socket/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/poc-socket/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/poc-socket/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/poc-socket/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# POC – Socket\n\n## What\n\nI started this project to understand more about Web Sockets ([socket.io](https://socket.io/)) and how to use them to build some multiplayer things.\n\nThe main goal was about having just one server used by many apps/games and I achieved this by using `rooms`. For each user that creates a new session, I create a new room with a unique `id` composed by a `name` and a `uuid`.\n\n## Development\n\n```sh\n# start development server and demo\nyarn dev\n\n# build server and demo for production\nyarn build\n\n# run as production\nyarn serve\n```\n"
      }
    }
  },
  {
    "name": "netlify-cms-widgets",
    "description": "A collection of Netlify CMS widgets.",
    "url": "https://github.com/marcomontalbano/netlify-cms-widgets",
    "defaultBranchRef": {
      "name": "main"
    },
    "homepageUrl": "https://www.marcomontalbano.com/netlify-cms-widgets",
    "createdAt": "2021-01-08T10:46:29Z",
    "updatedAt": "2021-06-18T20:16:06Z",
    "pushedAt": "2021-06-18T20:16:03Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/16580977871d4ab51cf8d02c7c6489a0eb0afee73ecad339e51c70469132bc2b/marcomontalbano/netlify-cms-widgets",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "netlify"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify-cms"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "widget"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify-cms-widget"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Netlify CMS •&nbsp;Widgets",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "main",
      "repositoryTopics": [
        "netlify",
        "netlify-cms",
        "widget",
        "netlify-cms-widget",
        "jest",
        "typescript"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/netlify-cms-widgets/raw/main/cover.png",
        "url": "https://github.com/marcomontalbano/netlify-cms-widgets/raw/main/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/netlify-cms-widgets/raw/main/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/netlify-cms-widgets/main/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Netlify CMS • Widgets\n\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/marcomontalbano/netlify-cms-widgets@0.1.0/dist/netlify-cms-widget-id.min.js\"></script>\n<script>CMS.registerWidget(marcomontalbano.netlifyCmsWidgetId)</script>\n```\n\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/marcomontalbano/netlify-cms-widgets@0.1.0/dist/netlify-cms-widget-secret.min.js\"></script>\n<script>CMS.registerWidget(marcomontalbano.netlifyCmsWidgetSecret)</script>\n```\n\n```html\n<script src=\"https://cdn.jsdelivr.net/gh/marcomontalbano/netlify-cms-widgets@0.1.0/dist/netlify-cms-widget-rating.min.js\"></script>\n<script>CMS.registerWidget(marcomontalbano.netlifyCmsWidgetRating)</script>\n```\n\n## Development\n\n```sh\n# install dependencies\nyarn\n\n# build widgets\nyarn build\n\n# playground\nyarn start\n\n# http://localhost:5000\n```\n"
      }
    }
  },
  {
    "name": "cv",
    "description": "This is my curriculum. It's just a PDF but with some cool behind the scenes.",
    "url": "https://github.com/marcomontalbano/cv",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://cv.marcomontalbano.com",
    "createdAt": "2020-05-08T18:55:16Z",
    "updatedAt": "2021-12-09T12:52:36Z",
    "pushedAt": "2022-07-21T01:51:39Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/5259867b0b4232d2c8764f57f581828a533e7d512666180d10294a919d17e4e8/marcomontalbano/cv",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "html2pdf"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "preact"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-pages"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-actions"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify-cms"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jamstack"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cv"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "curriculum-vitae"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "CV",
      "visible": false,
      "starCount": 2,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "html2pdf",
        "preact",
        "typescript",
        "jest",
        "github-pages",
        "github-actions",
        "netlify-cms",
        "jamstack",
        "cv",
        "curriculum-vitae"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/cv/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/cv/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/cv/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/cv/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# CV\n\n![Build and Deploy](https://github.com/marcomontalbano/cv/workflows/Build%20and%20Deploy/badge.svg)\n\n## Why this repo?\n\nLike always, I love to experiment new stuff and ways of working.\nWhen I finally had time to revamp my old website I decided to revamp my cv as well (of course update the information inside it is another story :joy:).\n\nA cv should be a pdf that you can send via email, upload on the company's website to apply for a new position or simply print.\nInstead of using already existing online tools or any word processor, I decided to create a new <u>*website that builds into pdf*</u>.\n\nYes, you read that right!\n\nI wanted to play with **JAMStack** approach, so why not build and publish a fully static ~~website~~ pdf with every `git push`?\n\n## Development\n\nI'm using [Netlify CMS](https://www.netlifycms.org/) to make instant changes to the pdf. I configured Netlify CMS to store all data in `.json` format inside the `./content` folder.\n\nI created this script [`netlify-cms-json-exporter`](https://github.com/marcomontalbano/netlify-cms-json-exporter) which is able to read all data from json and create a javascript object resolving relations between different collections. This object is then used by [Preact CLI](https://github.com/preactjs/preact-cli) to prerender the data.\n\nLast but not least, I'm using [GitHub Actions](https://github.com/features/actions) to build and publish the pdf. I choose the `macos` image because it makes the pdf text selectable and searchable without any effort.\n\n### Hosting\n\nIf you like this approch you can host your own cv.\n\n[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/marcomontalbano/video-to-markdown)\n\nAfter the deploy, you need to enable the Identity feature. You can follow the official documentation \"[Setup and settings](https://docs.netlify.com/visitor-access/git-gateway/#setup-and-settings)\".\n\n### Available scripts\n\n`npm run dev` starts local development\n\n- admin - http://localhost:3000/admin/\n- web - http://localhost:8080\n\n`npm run build:cv` :sparkles: builds website to pdf\n\n### Local Development\n\nYou can [connect Netlify CMS to a local Git repository](https://www.netlifycms.org/docs/beta-features/#working-with-a-local-git-repository), instead of working with a live repo.\n\n1. Navigate to a local Git repository configured with the CMS.\n1. Run `npx netlify-cms-proxy-server` from the root directory.\n1. Add the top-level property `local_backend: true` configuration to your `config.yml`.\n1. Run `npx serve src/static/admin` from the root directory.\n"
      }
    }
  },
  {
    "name": "test-nonce",
    "description": "Very small demo to test \"nonce\" hosted by Deno Deploy.",
    "url": "https://github.com/marcomontalbano/test-nonce",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://test-nonce.deno.dev/",
    "createdAt": "2019-11-04T18:45:31Z",
    "updatedAt": "2022-11-02T10:22:36Z",
    "pushedAt": "2022-10-14T21:49:04Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/bb6f3a329c86d6edec85b3d2487bda2f76e3ea8c839172727148f9b8128fb4fe/marcomontalbano/test-nonce",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "nonce"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "csp"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "deno"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "bulma-css"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Test NONCE",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "nonce",
        "csp",
        "deno",
        "bulma-css",
        "typescript"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/test-nonce/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/test-nonce/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/test-nonce/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/test-nonce/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Test NONCE\n\n```sh\ndeno fmt\ndeno lint\ndeno check index.tsx\n```\n\n```sh\ndeno task start\n# http://localhost:8000/\n```\n\n```sh\ndeployctl deploy --project=test-nonce index.tsx\n```\n"
      }
    }
  },
  {
    "name": "marcomontalbano.github.io",
    "description": "My own website",
    "url": "https://github.com/marcomontalbano/marcomontalbano.github.io",
    "defaultBranchRef": {
      "name": "production"
    },
    "homepageUrl": "https://marcomontalbano.com",
    "createdAt": "2019-08-30T11:53:57Z",
    "updatedAt": "2022-10-12T21:37:08Z",
    "pushedAt": "2022-11-03T21:56:09Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/6519d3baefad76a6308eb07461551c978c7741127c22d706be4490eb0e1a919a/marcomontalbano/marcomontalbano.github.io",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "portfolio"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-packages"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "gatsbyjs"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "styled-components"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "storybook"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "react"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-api"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-pages"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-actions"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "marcomontalbano.github.io",
      "visible": false,
      "starCount": 1,
      "forkCount": 0,
      "defaultBranch": "production",
      "repositoryTopics": [
        "portfolio",
        "github-packages",
        "gatsbyjs",
        "styled-components",
        "storybook",
        "react",
        "github-api",
        "github-pages",
        "typescript",
        "github-actions"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/marcomontalbano.github.io/raw/production/cover.png",
        "url": "https://github.com/marcomontalbano/marcomontalbano.github.io/raw/production/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/marcomontalbano.github.io/raw/production/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/marcomontalbano.github.io/production/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# marcomontalbano.github.io\n\n* Website available at https://www.marcomontalbano.com/.\n* Component Library available at https://component-library.marcomontalbano.com/\n\n## I know, I know\n\nIf you look into this repository you will probably notice that it looks a bit over-engeneered. I put in place many different tools because for me this is just an experimental sandbox that outputs my own website.\n\nThis is the toolkit:\n\n- [x] TypeScript\n- [x] React\n- [x] Storybook\n- [x] Gatsby\n- [x] Styled Components\n- [x] GitHub Actions\n- [x] GitHub Packages\n- [ ] Algolia\n\n\n## General Information\n\n:information_source: I'm using [Yarn](https://yarnpkg.com/) for [this reason](https://github.com/storybookjs/storybook/issues/6505).\n\nThis project is composed by 3 packages. I'm using [lerna](https://github.com/lerna/lerna) to manage this monorepo.\n\n* `dump-github` fetches the GitHub API v4, manipulate the data and create multiple json files that then are consumed by the `website`.\n* `component-library` is a [Storybook](https://storybook.js.org/) project. All components are available as downloadable [npm package](https://github.com/marcomontalbano/marcomontalbano.github.io/packages/79405).\n* `website` uses components from the *component-library*, consumes data from *dump-github* and builds the website using [Gatsby](https://www.gatsbyjs.org/).\n\n## Environment Variables\n\nYou need to set a `GITHUB_TOKEN` environment variable with `repo` scope.\n\n## Scripts\n\nI created many scripts in the root folder, so that it is easier to execute them without moving back and forth between folders.\n\n### General\n\n* `clean` - Clean all the auto-generated folder and files in all packages\n* `install` - Install root folder dependencies.\n* `postinstall` - Install dependencies from each packages.\n* `test` - Run tests in all packages\n* `lint` - Run lint in all packages\n\n### Dump Github\n\n* `db:build` - Fetch GitHub API and export data into multiple json files inside `./data` folder\n\n### Component Library\n\n* `componentLibrary:start` - Start *storybook* at http://localhost:9009/\n* `componentLibrary:watch` - Watch for changes and build the `component-library`\n* `componentLibrary:build` - Build the component-library producing a `dist` folder that contains all reusable components.\n\n### Website\n\n* `prewebsite:start` - Build *dump-github* and *component-library*.\n* `website:start` - Start *gatsby* at http://localhost:8000/\n\n\n## Release Life Cycle\n\n### General Rules\n\n1. Create a pull request for each development\n1. Add a label to each pull request\n\n### Component Library\n\n1. Create a new version from `production` with `yarn lerna:version`\n1. `release.yml` workflow will attach the release notes to a brand new draft release\n1. [ *only pre-release* ] Flag the release with `This is a pre-release`\n1. Manually publish the release from GitHub\n1. `publish.yml` workflow will publish the release to [GitHub registry](https://github.com/marcomontalbano/marcomontalbano.github.io/packages) and start the build on Netlify. :warning: This job can fail if there are no changes to the Component Library.\n\n### Website\n\n1. When you manually publish the release from GitHub, the `gh-pages.yml` workflow will be triggered also. This will deploy the website on [GitHub Pages](https://pages.github.com/)\n1. `gh-pages.yml` is also triggered on scheduled time. In this flow, the last available *tag* will be deployed.\n"
      }
    }
  },
  {
    "name": "figma-export",
    "description": "Export tool for Figma. You can easily and automatically export your Figma components and use them directly into your website.",
    "url": "https://github.com/marcomontalbano/figma-export",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://figma-export.marcomontalbano.com",
    "createdAt": "2019-06-12T21:37:53Z",
    "updatedAt": "2022-10-25T23:05:38Z",
    "pushedAt": "2022-10-13T20:12:26Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": true,
    "openGraphImageUrl": "https://repository-images.githubusercontent.com/191648270/416cd502-7aed-4d90-89ff-2e3b4a631bff",
    "stargazers": {
      "totalCount": 152
    },
    "forkCount": 24,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "figma"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "figma-export"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "svg"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "components"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cli"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coveralls"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "typescript"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "figma-export",
      "visible": true,
      "starCount": 152,
      "forkCount": 24,
      "defaultBranch": "master",
      "repositoryTopics": [
        "figma",
        "figma-export",
        "svg",
        "components",
        "mocha",
        "cli",
        "coveralls",
        "typescript"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/figma-export/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/figma-export/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/figma-export/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/figma-export/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "<p align=\"center\">\n    <img src=\"https://github.com/marcomontalbano/figma-export/raw/master/images/figma-export.png\" width=\"200\" />\n</p>\n\n<p align=\"center\">\n    Export tool for Figma.\n</p>\n\n<p align=\"center\">\n    You can easily and automatically export your figma components and styles and use them directly into your website.\n</p>\n\n<p align=\"center\">\n    <a href=\"https://github.com/marcomontalbano/figma-export\"><img alt=\"Build Status\" src=\"https://github.com/marcomontalbano/figma-export/workflows/Node%20CI/badge.svg\" /></a>\n    <a href=\"https://coveralls.io/github/marcomontalbano/figma-export?branch=master\"><img alt=\"Coverage Status\" src=\"https://coveralls.io/repos/github/marcomontalbano/figma-export/badge.svg?branch=master\" /></a>\n    <a href=\"https://github.com/sponsors/marcomontalbano\"><img alt=\"Sponsor\" src=\"https://img.shields.io/badge/-Sponsor-fafbfc?logo=GitHub%20Sponsors\" /></a>\n</p>\n\n\n## :sparkles: In Short\n\n### Components\n\nYou can export your Figma Components as SVG and use them inside your website.\n\n> This is particularly useful when you have your own icon set and you want to keep your website icons up-to-date with your Figma file.\n\n### Styles\n\nYou can export your Figma Styles into different output like `.sass` format, `.scss` format or you can create your own outputter.\n\n> If you want to keep the style of your Figma file in-sync with the `.css` of your website, this is a must-have.\n\n#### :art: Colors (paints)\n- [x] Color\n- [x] Linear Gradient\n\n#### :lollipop: Effects\n\n> Shadow and Blur effects cannot be combined together since they use two different CSS properties.\n\n- [x] Inner Shadow\n- [x] Drop Shadow\n- [x] Layer Blur\n\n#### :pencil2: Text\n\n- [x] font-family\n- [x] font-weight\n- [x] font-size\n- [x] line-height\n- [x] letter-spacing\n- [x] font-style\n- [x] font-variant\n- [x] text-transform\n- [x] text-decoration\n- [x] text-align\n\n\n## :old_key: Personal Access Token\n\nFirst of all you have to set the environment variable `FIGMA_TOKEN`.\n\nTo do so, you need a **Personal Access Token**. You can generate one from your *Account Settings*.\n\n<img width=\"209\" alt=\"Figma - Account Menu\" src=\"https://github.com/marcomontalbano/figma-export/raw/master/images/figma--account-menu.png\" />\n\nInside the Account Settings click on *Create a new personal access token* and enter a description.\n\nCopy the token, this is your only chance to do so!\n\n```sh\nexport FIGMA_TOKEN=<personalAccessToken>\n```\n\n> You can use [dotenv](https://www.npmjs.com/package/dotenv) or `export` the variable using `.bash_profile`/`.bashrc` file.\n\n\n## :test_tube: Just Try\n\nIf you wanna try it just run following command and you will be able to download all components from https://www.figma.com/file/fzYhvQpqwhZDUImRz431Qo as .svg :sunglasses:\n\n```sh\n# export figma token\nexport FIGMA_TOKEN=<personalAccessToken>\n\n# export figma components as svg\nnpx -p @figma-export/cli -p @figma-export/output-components-as-svg figma-export components fzYhvQpqwhZDUImRz431Qo -O @figma-export/output-components-as-svg\n```\n\nor you can export all styles into `.scss`\n\n```sh\n# export figma token\nexport FIGMA_TOKEN=<personalAccessToken>\n\n# export figma styles as .scss variables\nnpx -p @figma-export/cli -p @figma-export/output-styles-as-sass figma-export styles fzYhvQpqwhZDUImRz431Qo -O @figma-export/output-styles-as-sass\n```\n\n\n## :package: Packages\n\n### [@figma-export/core](https://github.com/marcomontalbano/figma-export/blob/master/packages/core)\n\nThis package contains the core functionalities for `figma-export`. You can download and use it as a dependency of your project.\n\n### [@figma-export/cli](https://github.com/marcomontalbano/figma-export/blob/master/packages/cli)\n\nThis package allows you to consume all core functionalities from your terminal.\n\n## :book: Usage\n\nTypically you'll prefer to use the `cli`. Here different ways to do the same:\n\n### Build Process\n\nYou can use `figma-export` as part of your build process.\n\n```sh\nnpm install --save-dev @figma-export/cli @figma-export/output-components-as-svg @figma-export/output-styles-as-sass\n\n# or using `yarn`\nyarn add @figma-export/cli @figma-export/output-components-as-svg @figma-export/output-styles-as-sass --dev\n```\n\nNow you can create a `script` command inside your `package.json`.\n\nFollowing an example:\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export-components\": \"figma-export components fzYhvQpqwhZDUImRz431Qo -O @figma-export/output-components-as-svg\",\n+   \"figma:export-styles\": \"figma-export styles fzYhvQpqwhZDUImRz431Qo -O @figma-export/output-styles-as-sass\",\n  }\n}\n```\n\n### Use it on the fly\n\nAlternatively you can use `npx` to use it on the fly:\n\n```sh\nnpx @figma-export/cli --help\n```\n\n### Global Setup\n\nYou can also install it as a global dependency:\n\n```sh\nnpm install -g @figma-export/cli\n\n# or using `yarn`\nyarn add @figma-export/cli --global\n```\n\n```sh\nfigma-export --help\n```\n\n### Advanced\n\nLast but not least, you can create a configuration file and use a single command *to rule them all* :ring:\n\nLet's create the file `.figmaexportrc.js` and paste the following:\n\n```js\nmodule.exports = {\n\n    commands: [\n\n        ['styles', {\n            fileId: 'fzYhvQpqwhZDUImRz431Qo',\n            // version: 'xxx123456', // optional - file's version history is only supported on paid Figma plans\n            // onlyFromPages: ['icons'], // optional - Figma page names (all pages when not specified)\n            outputters: [\n                require('@figma-export/output-styles-as-sass')({\n                    output: './output/styles'\n                })\n            ]\n        }],\n\n        ['components', {\n            fileId: 'fzYhvQpqwhZDUImRz431Qo',\n            // version: 'xxx123456', // optional - file's version history is only supported on paid Figma plans\n            onlyFromPages: ['icons'],\n            // filterComponent: (component) => !/^figma/.test(component.name), // optional\n            transformers: [\n                require('@figma-export/transform-svg-with-svgo')({\n                    plugins: [\n                        {\n                            name: 'preset-default',\n                            params: {\n                                overrides: {\n                                    removeViewBox: false,\n                                }\n                            }\n                        },\n                        {\n                            name: 'removeDimensions',\n                            active: true\n                        }\n                    ]\n                })\n            ],\n            outputters: [\n                require('@figma-export/output-components-as-svg')({\n                    output: './output/components'\n                })\n            ]\n        }]\n\n    ]\n\n};\n```\n\n> :information_source: Take a look at [.figmaexportrc.example.js](https://github.com/marcomontalbano/figma-export/blob/master/figmaexportrc.example.js) for more details.\n\nnow you can install the `@figma-export` dependencies that you need\n\n```sh\nnpm install --save-dev @figma-export/cli @figma-export/output-styles-as-sass @figma-export/transform-svg-with-svgo @figma-export/output-components-as-svg @figma-export/output-styles-as-sass\n```\n\nand update the `package.json`.\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"figma-export use-config\"\n  }\n}\n```\n\nIf needed you can also provide a different configuration file.\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"figma-export use-config .figmaexportrc.production.js\"\n  }\n}\n```\n\n#### TypeScript\n\nIf you prefer, you can create a `.figmaexportrc.ts` and use TypeScript instead.\nFor doing so, you just need to install a few new dependencies in your project.\n\n```sh\nnpm install --save-dev typescript ts-node @types/node @figma-export/types\n```\n\nand slightly change your `package.json`\n\n```diff\n{\n  \"scripts\": {\n+   \"figma:export\": \"ts-node ./node_modules/@figma-export/cli/bin/run use-config .figmaexportrc.ts\"\n  }\n}\n```\n\nTake a look at [.figmaexportrc.example.ts](https://github.com/marcomontalbano/figma-export/blob/master/figmaexportrc.example.ts) for more details.\n\n\n#### Node.js ESM\n\nNode.js is now supporting [ECMAScript modules (ESM)](https://nodejs.org/api/esm.html).\n\nIf your package.json contains the `\"type\": \"module\"` field then you'll need to rename your `.figmaexportrc.js` configuration file:\n\n```diff\n-  .figmaexportrc.js\n+  .figmaexportrc.cjs\n```\n\nand adjust the command you run:\n\n```sh\nfigma-export use-config .figmaexportrc.cjs\n```\n\nIf instead you're using the TypeScript setup you'll need to rename the `.figmaexportrc.ts` configuration file.\n\n```diff\n-  .figmaexportrc.ts\n+  .figmaexportrc.cts\n```\n\n\n## :books: More Packages\n\nFor the list of all official packages or if you want to create your own transformer or outputter you can continue reading [CLI Documentation](https://github.com/marcomontalbano/figma-export/blob/master/packages/cli#readme).\n"
      }
    }
  },
  {
    "name": "wasm-vs-js-benchmark",
    "description": "A comparison between WebAssembly and Javascript",
    "url": "https://github.com/marcomontalbano/wasm-vs-js-benchmark",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://marcomontalbano.github.io/wasm-vs-js-benchmark",
    "createdAt": "2019-02-05T11:14:50Z",
    "updatedAt": "2022-07-16T15:55:14Z",
    "pushedAt": "2022-07-20T01:24:15Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/51262b09af5b48040abd5f79a0204b0ad214f73506652ed2dbf3c3c3e1b154d9/marcomontalbano/wasm-vs-js-benchmark",
    "stargazers": {
      "totalCount": 10
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "webassembly"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "javascript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "benchmark"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "webworkers"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "rust"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "wasm"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "WebAssembly vs Javascript",
      "visible": true,
      "starCount": 10,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "webassembly",
        "javascript",
        "benchmark",
        "webworkers",
        "rust",
        "mocha",
        "wasm",
        "travis-ci"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/wasm-vs-js-benchmark/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/wasm-vs-js-benchmark/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/wasm-vs-js-benchmark/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/wasm-vs-js-benchmark/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# WebAssembly vs Javascript\n\n[![Build Status](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark.svg?branch=master)](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark)\n[![Dependabot Status](https://api.dependabot.com/badges/status?host=github&repo=marcomontalbano/wasm-vs-js-benchmark)](https://dependabot.com)\n\n*A comparison between WebAssembly and Javascript made for ~~studying~~ fun.*\n\n## What's in the box\n\n- WebAssembly with Rust\n- Benchmark with fancy charts\n- Web Workers to avoid a frozen main thread\n- Build and deploy with Travis CI\n\n## Rust and WebAssembly\n\nThere are two books that fully cover this section:\n\n- https://doc.rust-lang.org/book\n- https://rustwasm.github.io/book\n\nIn this project I'm also using [`wasm-bingen`](https://rustwasm.github.io/wasm-bindgen) and [`wasm-pack`](https://github.com/rustwasm/wasm-pack).\n\n## Project\n\n### Folder Structure\n\nSource code is splitted into two main folders: `src` that contains our Rust application and `src-js` that contains our Javascript application.\n\nI tried to make their folder structure as similar as possible:\n\n```sh\nsrc\n├── libs\n│   ├── mod.rs\n│   ├── ...\n│   └── primes.rs\n└── main.rs\n\nsrc-js\n├── libs\n│   ├── mod.js\n│   ├── ...\n│   └── primes.js\n├── ...\n├── bootstrap.js\n└── main.js\n```\n\n**`*/libs/mod.*`** is the entry point for declaring all modules. The `.rs` version of this file will be compiled to `.wasm`.\n\n**`*/libs/primes.*`** is a module example, written both in Rust and Javascript.\n\n**`*/main.*`** is the entry point for the application. The `.rs` file is the one used by `cargo run` command. The `.js` file is the one used by webpack.\n\n**`./src-js/bootstrap.js`** is the bootstrap file for the web application that loads the `main.js` file asynchronously.\n\n\n### Rust\n\nThe first step is to [install Rust](https://doc.rust-lang.org/stable/book/ch01-01-installation.html). We’ll download Rust through `rustup`, a command line tool for managing Rust versions and associated tools.\n\nRunnig following command we'll install Rust and [Cargo](https://doc.rust-lang.org/cargo) automatically.\nYou will also need to install [wasm-pack](https://rustwasm.github.io/wasm-pack/installer/).\n\n```sh\n$ curl https://sh.rustup.rs -sSf | sh\n\n# install `wasm-pack`\n$ curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n\n# update dependencies\n$ cargo update\n```\n\nNow we are able to use the following commands from our project folder.\n\n```sh\n# test .rs files\n$ cargo test\n\n# compile `src/main.rs`\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s)\n\n# or compile `src/main.rs` with optimizations\n$ cargo build --release\n    Finished release [optimized] target(s)\n```\n\nNow that we have built our code, we can run it:\n\n```sh\n$ ./target/release/wasm-vs-js-benchmark primes-get_primes 11\n```\n\nWe can also use `cargo run` to compile and then run it, all in one step:\n\n```sh\n$ cargo run primes-get_primes 11\n\n# compile and run our project with optimizations\n$ cargo run --release primes-get_primes 11\n```\n\nLast but not least, we'll compile our project to `.wasm`:\n\n```sh\n$ wasm-pack build\n```\n\nNow we are able to use the content of `./pkg` folder for our web application.\n\n\n### Javascript\n\nThe goal of this project is benchmarking WebAssembly and Javascript. Some task will use big computations that takes time to execute.\n\n[`Web Workers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) makes it possible to run a script operation in a background thread separate from the main execution thread of a web application.\n\nThe web application is bundled with [`Webpack`](https://webpack.js.org/).\n\nRun following command to start it:\n\n```sh\n$ npm run build:wasm\n$ npm start\n```\n\nProject is running at http://localhost:8080/\n\n\n### Unit Test\n\nYou can run unit test for Rust and Javascript, simply running `npm test`.\n\nI use `mocha` for javascript unit test, transpiling ES6 with `@babel/core`, `@babel/preset-env` and `@babel/register`.\n\n\n## Benchmark\n\n### Rust to Native Code\n\nThe execution time of .wasm binaries is just a bit slower than the execution of same native code.\n\nFor benchmarking the native code, I use [Hyperfine](https://github.com/sharkdp/hyperfine).\n\nThese benchmarks are recorded on a MacBook Pro (15-inch, 2016) having these specs:\n\n- macOS Mojave\n- 2,6 GHz Intel Core i7 (4 cores)\n- 16 GB 2133 MHz LPDDR3\n\n```sh\n$ cargo build --release\n\n$ hyperfine --warmup 3 --export-markdown BENCHMARK.md \\\n    './target/release/wasm-vs-js-benchmark primes-get_primes 100000' \\\n    './target/release/wasm-vs-js-benchmark matrix-multiply 500 500'\n```\n\n| Command | Mean [s] | Min…Max [s] |\n|:---|---:|---:|\n| `./target/release/wasm-vs-js-benchmark primes-get_primes 100000` | 1.211 ± 0.018 | 1.196…1.255 |\n| `./target/release/wasm-vs-js-benchmark matrix-multiply 500 500` | 0.435 ± 0.016 | 0.417…0.469 |\n\n\n### WebAssembly vs Javascript\n\nhttps://marcomontalbano.github.io/wasm-vs-js-benchmark\n\n\n## Useful Links\n\n- https://webassembly.org/\n\n- https://doc.rust-lang.org/book\n- https://doc.rust-lang.org/rust-by-example\n\n- https://developer.mozilla.org/en-US/docs/WebAssembly\n- https://developer.mozilla.org/en-US/docs/WebAssembly/rust_to_wasm\n\n- https://rustwasm.github.io/book\n- https://rustwasm.github.io/wasm-bindgen\n\n- https://github.com/rustwasm/create-wasm-app\n- https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n- https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71\n\n"
      }
    }
  },
  {
    "name": "video-to-markdown",
    "description": "How to embed a video in markdown? Here the answer. Add videos to your markdown files easier.",
    "url": "https://github.com/marcomontalbano/video-to-markdown",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://video-to-markdown.marcomontalbano.com",
    "createdAt": "2018-09-06T17:46:43Z",
    "updatedAt": "2022-10-29T14:33:06Z",
    "pushedAt": "2022-09-17T19:44:41Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/3556fd10f16b0f6908bfb30635552dbc1ddb265c527e2b426f392b9c49216019/marcomontalbano/video-to-markdown",
    "stargazers": {
      "totalCount": 152
    },
    "forkCount": 19,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "video"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "youtube"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "vimeo"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "dailymotion"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "markdown"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "netlify-lambda"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "parcel"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "facebook"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "asciinema"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "google-drive"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cloudinary"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "loom"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "wistia"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "streamable"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "cleanshot"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "tiktok"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "onedrive"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "peertube"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Video to Markdown",
      "visible": true,
      "starCount": 152,
      "forkCount": 19,
      "defaultBranch": "master",
      "repositoryTopics": [
        "video",
        "youtube",
        "vimeo",
        "dailymotion",
        "markdown",
        "netlify",
        "netlify-lambda",
        "parcel",
        "facebook",
        "asciinema",
        "google-drive",
        "cloudinary",
        "travis-ci",
        "loom",
        "wistia",
        "streamable",
        "cleanshot",
        "tiktok",
        "onedrive",
        "peertube"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/video-to-markdown/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/video-to-markdown/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/video-to-markdown/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/video-to-markdown/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Video to Markdown\n=================\n\n[![Build Status](https://travis-ci.org/marcomontalbano/video-to-markdown.svg?branch=master)](https://travis-ci.org/marcomontalbano/video-to-markdown)\n[![Cloudinary](https://shields.io/badge/-Cloudinary-3448c5)](https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/nfvt85kdqleszdah0hxq)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n[![Sponsor](https://img.shields.io/badge/-Sponsor-fafbfc?logo=GitHub%20Sponsors)](https://github.com/sponsors/marcomontalbano)\n\n[![Netlify Status](https://api.netlify.com/api/v1/badges/545bbce5-8f34-4834-9e16-685a9990c987/deploy-status)](https://app.netlify.com/sites/video-to-markdown/deploys)\n\nAdd videos to your markdown files easier - [https://video-to-markdown.netlify.com](https://video-to-markdown.netlify.com).\n\n\n## Why?\n\nHow often did you find yourself googling _¨How to embed a video in markdown?¨_\n\nWhile its not possible to embed a video in markdown, the best and easiest way is to extract a frame from the video, add a layer with a play icon and link the video url on the image.\n\nSpeaking HTMLese, this is what you would do:\n\n```html\n<a href=\"{video-url}\" title=\"Link Title\"><img src=\"https://github.com/marcomontalbano/video-to-markdown/raw/master/{image-url}\" alt=\"Alternate Text\" /></a>\n```\n\nthat translates into markdown as:\n\n```md\n[![Alternate Text](https://github.com/marcomontalbano/video-to-markdown/raw/master/{image-url})]({video-url} \"Link Title\")\n```\n\nTo speed up the process I developped this tool that will do it for you.\n\nYou just need to paste the video url in the field above and you will get the markdown you need.\n\n\n## Features\n\nList of supported video providers:\n\n- [x] Asciinema\n- [x] CleanShot Cloud\n- [x] Dailymotion\n- [x] Facebook (low-quality)\n- [x] Google Drive\n- [x] Loom\n- [x] OneDrive\n- [x] PeerTube\n- [x] Streamable\n- [x] TikTok\n- [x] Vimeo\n- [x] Wistia\n- [x] Youtube\n\n\n## Hosting\n\nFirst of all you need to create a [Cloudinary] account (I'm using this service to generate and host images) so that you can copy your personal `CLOUDINARY_URL` from your dashboard. The url is something similar to `cloudinary://my_key:my_secret@my_cloud_name`.\n\nNow you can easily deploy your own copy on Netlify.\n\n[![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/marcomontalbano/video-to-markdown)\n\n\n## Development stuff\n\nTo run the project locally, here’s what you’ll need:\n\n### Requirements\n\n* [Cloudinary] account\n* [Node.js](https://nodejs.org/) 16 or greater\n\n### Setup\n\n`cd` into your local copy of the repository and run `yarn install`\n\n```sh\ncd video-to-markdown\nyarn install\n```\n\n```sh\ncp .env.sample .env\n# update the .env with proper values\n```\n\n* `CLOUDINARY_URL` ( **required** ) - this is the `API Environment variable` that you can get from your Cloudinary dashboard inside the **Account Details** section.\n* `GA_TRACKING_ID` ( _optional_ ) - this is a Google Analytics Tracking ID. Can be used if you need to track page views and events.\n* `NETLIFY_ACCESS_TOKEN` ( _optional_ ) - this a Netlify Access Token. In combination with the `SITE_ID` can be used to display the **API Usage** in the website.\n* `SITE_ID` ( _optional_ ) - this the Netlify Site ID. In combination with the `NETLIFY_ACCESS_TOKEN` can be used to display the **API Usage** in the website.\n* `USE_HIGH_QUALITY` ( _optional_ ) - this is a boolean flag. If `true`, the generated images will be stored in Contenful with hi-res quality (default to `false`)\n\n```sh\nyarn start\n```\n\nThis will start the client server on http://localhost:8080, and the netlify-lambda server on http://localhost:8081.\n\n[netlify-lambda](https://github.com/netlify/netlify-lambda) isn’t required to deploy Lambda functions to Netlify, but it offers some handy features out of the box that make it quicker to get started, like the local dev server and nice defaults for transpiling and bundling functions in production.\n\nThe client server is configured to proxy `/.netlify` requests to the Lambda server (see [webpack.client.js](https://github.com/marcomontalbano/video-to-markdown/blob/master/webpack.client.js)). This is the same behavior the site has when it’s deployed to Netlify.\n\n## Privacy\n\nGoogle Analytics is used to record the following:\n\n* [Basic visit data](https://support.google.com/analytics/answer/6004245?ref_topic=2919631).\n* `referer` or `video url` to track api usage.\n\nAll images are generated via [Cloudinary] and stored in it.\nIn this way the generated images are cached so we can avoid to call Netlify functions again thus reducing the quota consumption.\n\nBy clicking on `convert to markdown` or consuming api you accept this terms & condition; no additional data is sent to the server.\n\n[Cloudinary]: https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/nfvt85kdqleszdah0hxq\n"
      }
    }
  },
  {
    "name": "github-emoji",
    "description": "Finally a complete list of GitHub Emoji. Now you can easily search and use all emojis you want in your .md files, like this 🤠 or this 🏰.",
    "url": "https://github.com/marcomontalbano/github-emoji",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://marcomontalbano.github.io/github-emoji/",
    "createdAt": "2018-04-28T15:26:07Z",
    "updatedAt": "2022-01-04T08:05:37Z",
    "pushedAt": "2022-07-20T02:25:58Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/c9f041464e289f9d683b040abc730d64781953397a8249a92ff87189d32155db/marcomontalbano/github-emoji",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "github-emoji"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "emoji"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "emojis"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "gh-pages"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "GitHub Emoji",
      "visible": true,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "github-emoji",
        "emoji",
        "emojis",
        "gh-pages",
        "travis-ci"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/github-emoji/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/github-emoji/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/github-emoji/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/github-emoji/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "GitHub Emoji\n============\n\n[![Build Status](https://travis-ci.com/marcomontalbano/github-emoji.svg?branch=master)](https://travis-ci.com/marcomontalbano/github-emoji)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n\nFinally a complete list of GitHub Emojis.\n\nNow you can search and use all emojis you want in your .md files, like this :cowboy_hat_face: or this :european_castle:.\n\n## Development stuff\n\nThe project has been developed with [React](https://reactjs.org/) and [Flux](http://facebook.github.io/flux/).\n\nI'm using [GitHub Actions](https://github.com/marcomontalbano/github-emoji/actions) to build and deploy the website.\n"
      }
    }
  },
  {
    "name": "speedtest-for-digitalocean",
    "description": "Run speed tests for all DigitalOcean datacenters faster than ever.",
    "url": "https://github.com/marcomontalbano/speedtest-for-digitalocean",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "http://speedtest-do.marcomontalbano.com",
    "createdAt": "2017-12-21T09:22:40Z",
    "updatedAt": "2022-07-24T03:07:11Z",
    "pushedAt": "2022-07-20T16:39:48Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/6a2cc1d28d20406bd1ce67ff6a791f72c79e8e7ec3b808e0d01694f889b17504/marcomontalbano/speedtest-for-digitalocean",
    "stargazers": {
      "totalCount": 41
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "fastest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "speedtest"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "speed-test"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "digitalocean"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "datacenter"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "ping"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "codeship"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Speed Test for DigitalOcean",
      "visible": true,
      "starCount": 41,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "fastest",
        "speedtest",
        "speed-test",
        "digitalocean",
        "datacenter",
        "ping",
        "codeship"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/speedtest-for-digitalocean/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/speedtest-for-digitalocean/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Speed Test for DigitalOcean\n===========================\n\n[![Build Status](https://travis-ci.com/marcomontalbano/speedtest-for-digitalocean.svg?branch=master)](https://travis-ci.com/marcomontalbano/speedtest-for-digitalocean)\n[![PayPal.me](https://img.shields.io/badge/paypal-donate-119fde.svg)](https://www.paypal.me/marcomontalbano)\n[![Sponsor](https://img.shields.io/badge/-Sponsor-fafbfc?logo=GitHub%20Sponsors)](https://github.com/sponsors/marcomontalbano)\n\nDigitalOcean provides usefull links to run speed tests for each datacenter, but only one at a time.\nI created this repository to speed up this process.\n\nRun speed tests for all DigitalOcean datacenters faster than ever.\n\n[https://speedtest-do.marcomontalbano.com](https://speedtest-do.marcomontalbano.com)\n\nJust click start!\n\n![Speedtest for DigitalOcean - Screenshot](https://github.com/marcomontalbano/speedtest-for-digitalocean/raw/master/public/images/speedtest-for-digitalocean-screenshot-without-header.jpg)\n\nThis tool uses the same service used by __speedtest-*.digitalocean.com__ so the result should be the same.\n\n\n## Micro Frontend\n\nUnfortunately, this application is not working anymore from my domain since the speed test service is now validating the domain name.\n\nOf course, the valid domain is the DigitalOcean domain. Given that, I decided to refactor this application to be **served as a micro-frontend** so that we are able to inject it into their website.\n\n### How does it work?\n\nWhen Travis CI builds the website and publishes it to GitHub Pages, two files are generated (`main.js` and `main.css`). They are used both to render the website hosted at [speedtest-do.marcomontalbano.com](https://speedtest-do.marcomontalbano.com/) and to render the injected application at [speedtest-nyc1.digitalocean.com](https://speedtest-nyc1.digitalocean.com/).\n\nThe `bookmark` is simply a javascript code that injects both files in the website in a similar way:\n\n```js\nvar script = document.createElement('script');\nscript.src = 'https://cdn.jsdelivr.net/gh/marcomontalbano/speedtest-for-digitalocean@latest/static/js/main.js';\n\nvar style = document.createElement('link');\nstyle.href = 'https://cdn.jsdelivr.net/gh/marcomontalbano/speedtest-for-digitalocean@latest/static/css/main.css';\nstyle.rel = 'stylesheet';\n\ndocument.head.innerHTML = '';\ndocument.body.innerHTML = '';\n\ndocument.body.setAttribute('id', 'st4do-root');\ndocument.head.append(script, style);\n```\n\nYou can take a look at the production code being used: [`bookmark.js`](https://github.com/marcomontalbano/speedtest-for-digitalocean/blob/master/bookmark.js)\n\n\n## Need an account for DigitalOcean?\n\nClick [here](https://m.do.co/c/45b8cffe90f8) to register a new one!\n\n\n## Privacy\n\nGoogle Analytics is used to record the following:\n\n* [Basic visit data](https://support.google.com/analytics/answer/6004245?ref_topic=2919631).\n* `ping`, `download` and `upload` speed for each region in order to provide the consultable table.\n\nClicking on `start` you accept this terms & condition; no additional data is sent to the server.\n"
      }
    }
  },
  {
    "name": "html-miner",
    "description": "A powerful miner that will scrape html pages for you. ` HTML Scraper ´",
    "url": "https://github.com/marcomontalbano/html-miner",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://marcomontalbano.github.io/html-miner",
    "createdAt": "2017-08-12T20:38:43Z",
    "updatedAt": "2022-02-10T13:14:05Z",
    "pushedAt": "2022-04-08T22:03:32Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/e188d5230dad003c057cb6b7bbc2e0e759d43f25dddbf147e7333634278ae6bb/marcomontalbano/html-miner",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 2,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "html-scraper"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "scraper"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nodejs"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "npm-package"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coverage"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nyc"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "istanbul"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "HTML Miner",
      "visible": true,
      "starCount": 2,
      "forkCount": 2,
      "defaultBranch": "master",
      "repositoryTopics": [
        "html-scraper",
        "scraper",
        "nodejs",
        "npm-package",
        "mocha",
        "coverage",
        "nyc",
        "istanbul"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/html-miner/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/html-miner/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/html-miner/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/html-miner/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "HTML Miner\n==========\n\n[![Npm](https://img.shields.io/npm/v/html-miner.svg)](https://www.npmjs.com/package/html-miner)\n[![Build Status](https://travis-ci.org/marcomontalbano/html-miner.svg?branch=master)](https://travis-ci.org/marcomontalbano/html-miner)\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/html-miner/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/html-miner?branch=master)\n[![Code Climate](https://codeclimate.com/github/marcomontalbano/html-miner/badges/gpa.svg)](https://codeclimate.com/github/marcomontalbano/html-miner)\n[![Issue Count](https://codeclimate.com/github/marcomontalbano/html-miner/badges/issue_count.svg)](https://codeclimate.com/github/marcomontalbano/html-miner/issues)\n\nA powerful miner that will scrape html pages for you.\n\n## Install\n\n[![NPM](https://nodei.co/npm/html-miner.png)](https://nodei.co/npm/html-miner/)\n\n```sh\n# using npm\nnpm i --save html-miner\n\n# using yarn\nyarn add html-miner\n```\n\n## Example\n\nI decided to collect common use cases inside a dedicated [EXAMPLE.md](https://github.com/marcomontalbano/html-miner/blob/master/EXAMPLE.md). Feel free to start from **Usage** section or jump directly to **Example** page.\n\nIf you want to experiment, an [online playground](https://marcomontalbano.github.io/html-miner) is also available.\n\n\n:green_book: Enjoy your reading\n\n## Usage\n\n### Arguments\n\n`html-miner` accepts two arguments: `html` and `selector`.\n\n```js\nconst htmlMiner = require('html-miner');\n\n// htmlMiner(html, selector);\n```\n\n#### HTML\n\n_html_ is a string and contains `html` code.\n\n```js\nlet html = '<div class=\"title\">Hello <span>Marco</span>!</div>';\n```\n\n#### SELECTOR\n\n_selector_ could be:\n\n`STRING`\n\n```js\nhtmlMiner(html, '.title');\n//=> Hello Marco!\n```\n\nIf the selector extracts more elements, the result is an array:\n\n```js\nlet htmlWithDivs = '<div>Element 1</div><div>Element 2</div>';\nhtmlMiner(htmlWithDivs, 'div');\n//=> ['Element 1', 'Element 2']\n```\n\n`FUNCTION`\n\nRead [function in detail](#function-in-detail) paragraph.\n\n```js\nhtmlMiner(html, () => 'Hello everyone!');\n//=> Hello everyone!\n\nhtmlMiner(html, function () {\n    return 'Hello everyone!'\n});\n//=> Hello everyone!\n```\n\n`ARRAY`\n\n```js\nhtmlMiner(html, ['.title', 'span']);\n//=> ['Hello Marco!', 'Marco']\n```\n\n`OBJECT`\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: 'span'\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco'\n//   }\n```\n\nYou can combine `array` and `object` with each other or with string and functions.\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: '.title span',\n    upper: (arg) => { return arg.scopeData.who.toUpperCase(); }\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco',\n//     upper: 'MARCO'\n//   }\n```\n\n\n### Function in detail\n\nA `function` accepts only one argument that is an `object` containing:\n\n- `$`: is a jQuery-like function pointing to the document ( html argument ). You can use it to query and fetch elements from the html.\n\n    ```js\n    htmlMiner(html, arg => arg.$('.title').text());\n    //=> Hello Marco!\n    ```\n\n- `$scope`: useful when combined with `_each_` or `_container_` (read [special keys](#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: 'span',\n            value: (arg) => {\n                // \"arg.$scope.find('.title')\" doesn't exist.\n                return arg.$scope.text();\n            }\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         value: 'Marco'\n    //     }]\n    //   }\n    ```\n\n- `globalData`: is an object that contains all **previously** fetched datas.\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: '.title span',\n            pageTitle: function(arg) {\n                // \"arg.globalData.who\" is undefined because defined later.\n                return arg.globalData.title;\n            }\n        },\n        who: '.title span'\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         pageTitle: 'Hello Marco!'\n    //     }],\n    //     who: 'Marco'\n    //   }\n    ```\n\n- `scopeData`: similar to `globalData`, but only contains scope data. Useful when combined with `_each_` (read [special keys](#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        upper: (arg) => { return arg.scopeData.title.toUpperCase(); },\n        sublist: {\n            who: '.title span',\n            upper: (arg) => {\n                // \"arg.scopeData.title\" is undefined because \"title\" is out of scope.\n                return arg.scopeData.who.toUpperCase();\n            },\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     upper: 'HELLO MARCO!',\n    //     sublist: {\n    //         who: 'Marco',\n    //         upper: 'MARCO'\n    //     }\n    //   }\n    ```\n\n\n### Special keys\n\nWhen selector is an `object`, you can use _special keys_: \n\n- `_each_`: creates a list of items. HTML Miner will iterate for the value and will parse siblings keys.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_eachId_`: useful when combined with `_each_`. Instead of creating an Array, it creates an Object where keys are the result of `_eachId_` function.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            _eachId_: function(arg) {\n                return arg.$scope.data('id');\n            }\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_container_`: uses the parsed value as container. HTML Miner will parse siblings keys, searching them inside the _container_.\n\n    ```js\n    {\n        footer: {\n            _container_: 'footer',\n            copyright: (arg) => { return arg.$scope.text().trim(); },\n            company: 'span' // find only 'span' inside 'footer'.\n        }\n    }\n    ```\n\nFor more details see the following [example](#lets-try-this-out).\n\n\n## Let's try this out\n\nConsider the following html snippet: we will try and fetch some information.\n\n```html\n<h1>Hello, <span>world</span>!</h1>\n<div class=\"articles\">\n    <div class=\"article\" data-id=\"a001\">\n        <h2>Heading 1</h2>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n    <div class=\"article\" data-id=\"a002\">\n        <h2>Heading 2</h2>\n        <p>Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.</p>\n    </div>\n    <div class=\"article\" data-id=\"a003\">\n        <h2>Heading 3</h2>\n        <p>Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.</p>\n    </div>\n</div>\n<footer>\n    <p>&copy; <span>Company</span> 2017</p>\n</footer>\n```\n\n```js\nconst htmlMiner = require('html-miner');\n\nlet json = htmlMiner(html, {\n    title: 'h1',\n    who: 'h1 span',\n    h2: 'h2',\n    articlesArray: {\n        _each_: '.articles .article',\n        title: 'h2',\n        content: 'p',\n    },\n    articlesObject: {\n        _each_: '.articles .article',\n        _eachId_: function(arg) {\n            return arg.$scope.data('id');\n        },\n        title: 'h2',\n        content: 'p',\n    },\n    footer: {\n        _container_: 'footer',\n        copyright: (arg) => { return arg.$scope.text().trim(); },\n        company: 'span',\n        year: (arg) => { return arg.scopeData.copyright.match(/[0-9]+/)[0]; },\n    },\n    greet: () => { return 'Hi!'; }\n});\n\nconsole.log( json );\n\n//=> {\n//     title: 'Hello, world!',\n//     who: 'world',\n//     h2: ['Heading 1', 'Heading 2', 'Heading 3'],\n//     articlesArray: [\n//         {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     ],\n//     articlesObject: {\n//         'a001': {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         'a002': {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         'a003': {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     },\n//     footer: {\n//         copyright: '© Company 2017',\n//         company: 'Company',\n//         year: '2017'\n//     },\n//     greet: 'Hi!'\n//   }\n\n```\n\nYou can find other examples under the folder `/examples`\n```sh\n# you can test examples with nodejs\nnode examples/demo.js\nnode examples/site.js\n```\n\n\n## Development\n\n```sh\nnpm install\nnpm test\n\n# start the playground locally\nnpm start\n```\n"
      }
    }
  },
  {
    "name": "mako-framework",
    "description": "This fork adds support for PHP 7 to Mako Framework 3.x.",
    "url": "https://github.com/marcomontalbano/mako-framework",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "https://makoframework.com",
    "createdAt": "2017-06-21T06:32:46Z",
    "updatedAt": "2022-01-30T10:46:17Z",
    "pushedAt": "2019-05-14T11:30:41Z",
    "isFork": true,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/b55a12a7ea9645711df323da255f06d2c441328d4a55d95a889b09b2dc11809f/marcomontalbano/mako-framework",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "framework"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "php7"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mako-framework"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Mako Framework",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "framework",
        "php7",
        "mako-framework"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/mako-framework/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/mako-framework/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/mako-framework/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/mako-framework/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# Mako Framework\n\n[![Build Status](https://api.travis-ci.org/marcomontalbano/mako-framework.svg?branch=master)](https://travis-ci.org/marcomontalbano/mako-framework)\n[![Latest Stable Version](https://img.shields.io/github/release/marcomontalbano/mako-framework.svg)](https://github.com/marcomontalbano/mako-framework/releases)\n\nThis fork adds support for **PHP 7** to [Mako Framework](https://github.com/mako-framework/framework) 3.x.\n\nIf you are currently use this old version, you can now update to Mako Framework 3.7 and use PHP 7.\n\n## How to update\n\nAs suggested by [@freost](https://github.com/mako-framework/framework/pull/221#issuecomment-310623621) (i asked for an official release) you just need to update your `composer.json`.\n\n```json\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/marcomontalbano/mako-framework\"\n        }\n    ],\n    \"require\": {\n        \"mako/framework\": \"3.7.*\",\n    },\n}\n```\n\nThat's it! Run `composer update` and start to play with PHP 7.\n"
      }
    }
  },
  {
    "name": "an-introduction-to-frontend",
    "description": "This is an introduction to Frontend.",
    "url": "https://github.com/marcomontalbano/an-introduction-to-frontend",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2017-04-13T16:53:22Z",
    "updatedAt": "2021-09-14T06:59:42Z",
    "pushedAt": "2022-06-21T21:41:28Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/0e81ed507c893aab011fd91a506a2fcfb87bb2575e82c0ff1fc4fc075e9820d1/marcomontalbano/an-introduction-to-frontend",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 1,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "frontend"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "course"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "slides"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "vanilla-javascript"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jquery"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "scss"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nodejs"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "gruntjs"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "An introduction to Frontend",
      "visible": true,
      "starCount": 1,
      "forkCount": 1,
      "defaultBranch": "master",
      "repositoryTopics": [
        "frontend",
        "course",
        "slides",
        "vanilla-javascript",
        "jquery",
        "scss",
        "nodejs",
        "gruntjs"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/an-introduction-to-frontend/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/an-introduction-to-frontend/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/an-introduction-to-frontend/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/an-introduction-to-frontend/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "An introduction to Frontend\n===========================\n\nWelcome to **An introduction to Frontend**.\n\nThe course covers:\n\n- HTML, CSS and Javascript (ES6) basics\n- DOM manipulation with [Vanilla JS](https://developer.mozilla.org/en-US/docs/Web/JavaScript)\n- Dependency management with [NPM](https://www.npmjs.com/)\n- Task runner (e.g. [Parcel](https://en.parceljs.org/))\n- CSS preprocessor (e.g. [Scss](https://sass-lang.com/))\n\n[Here](https://marcomontalbano.github.io/an-introduction-to-frontend) you can find what my course aims to create.\n\nAll slides have been prepared and used by me while teaching a course on Frontend basics and are available on speakerdeck.\n\n[https://speakerdeck.com/marcomontalbano/an-introduction-to-frontend-2020-edition](https://speakerdeck.com/marcomontalbano/an-introduction-to-frontend-2020-edition)\n"
      }
    }
  },
  {
    "name": "bash_profile",
    "description": "A collection of bash utilities. Set and unset proxy. Completions for git, svn and ssh. PS1 customization.",
    "url": "https://github.com/marcomontalbano/bash_profile",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2016-11-10T12:41:01Z",
    "updatedAt": "2022-09-11T06:07:16Z",
    "pushedAt": "2020-07-14T20:35:02Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/265022b57eda96b7d3a77f789129a337b4252188575d9206739646026792a934/marcomontalbano/bash_profile",
    "stargazers": {
      "totalCount": 19
    },
    "forkCount": 6,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "bash-profile"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "terminal"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "shell"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "utility"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": ".bash_profile",
      "visible": false,
      "starCount": 19,
      "forkCount": 6,
      "defaultBranch": "master",
      "repositoryTopics": [
        "bash-profile",
        "terminal",
        "shell",
        "utility"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/bash_profile/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/bash_profile/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/bash_profile/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/bash_profile/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "![](https://img.shields.io/badge/available_for-osx-green.svg?style=flat-square)\n![](https://img.shields.io/badge/available_for-ubuntu-green.svg?style=flat-square)\n![](https://img.shields.io/badge/available_for-windows-green.svg?style=flat-square)\n\n# .bash_profile\n\nThis is a collection of bash utilities. It contains:\n\n- [x] PS1 customization with Git and Svn integration.\n- [x] Bash Completions for Git, Svn, SSH and SFTP.\n- [x] set/unset proxy faster.\n- [x] Updatable `bash_profile` project.\n\n[![asciicast](https://asciinema.org/a/MEknLqkjqFCRHg8kQoT5G84r6.svg)](https://asciinema.org/a/MEknLqkjqFCRHg8kQoT5G84r6)\n\n## Get started\n\nClone this project in your home folder `~`.\n\n```sh\ncd ~ && git clone https://github.com/marcomontalbano/bash_profile.git\n```\n\nOpen and modify your `$HOME/.bash_profile` on OS X and Windows or `$HOME/.bashrc` on Ubuntu, adding the following script.\n\n```sh\n# https://github.com/marcomontalbano/bash_profile\nsource ~/bash_profile/.bash_profile -u\n```\n\n### Options\n\n- `-p <http-proxy>`: combined with `-u`, you can use self-update behind proxy.\n- `-u`: enables self-update for bash_profile. (the latest release will automatically downloaded and loaded)\n- `-w`: show welcome screen on new tabs.\n\n\n## Completions\n\nThe following procedure works for OS X. If you are using Windows or Ubuntu, you don't need it. \n\nIf you want to use the git, svn and ssh completion, just run following scripts.\n\n```sh\n# Bash Completion for GIT\ncurl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/bash_profile/.bash_completion_git\n\n# Bash Completion for SVN\ncurl http://svn.apache.org/repos/asf/subversion/trunk/tools/client-side/bash_completion -o ~/bash_profile/.bash_completion_svn\n\n# Bash Completion for SSH and SFTP\ncurl https://gist.githubusercontent.com/marcomontalbano/7c48f6756e4e4133c30fdb8e1fff3100/raw -o ~/bash_profile/.bash_completion_ssh\n```\n\n## Useful Commands\n\n### Bash Profile\n\n- **bash_profile__path** - get project path.\n\n- **bash_profile__cd** - `cd` to the `bash_profile` folder. Something like `cd ~/bash_profile`\n\n- **bash_profile__version** - get current version.\n\n- **bash_profile__reload** - reload the project.\n\n- **bash_profile__reload_all** - reload your own `.bash_profile` or `.bashrc`.\n\n- **bash_profile__update** - update the `bash_profile` project with latest changes. Is \"just\" a `git pull` :smile:\n\n### General\n\nBelow a list of utilities that you can use on command line or your own .bash_profile.\n\n- **console__set_title** - set a console title. _(only for OS X and Windows)_\n\n- **cli__is_installed** - check if a program is installed on your system. *`cli__is_installed node` will return `true` if node is installed on your system, `false` otherwise.*\n\n- **proxy__set** - simply set the command line proxy. It works also for npm and apm, if you use them. *usage: `proxy__set http://domain:8080` or `proxy__set http://domain:8080 https://domain:8080`*\n\n- **proxy__unset** - simply unset the command line proxy.\n\n- **network__get_ip** - get ip address _(e.g. 192.168.0.5)_\n\n- **network__get_gateway** - get gateway address _(e.g. 192.168.0.1)_\n\n- **network__get_broadcast** - get broadcast address _(e.g. 192.168.0.1)_\n\n- **java__use_jdk** - if you work with different version of JDK, you can easily switch with `java__use_jdk 1.8`. _(only for OS X)_\n\n### Git\n\n- **git__update_date** - update last commit with current date. *usage: `git__update_date` or `git__update_date -v -5H`* _(only for OS X)_\n\n\n## PS1 customization\n\nPS1 is customized with multiple lines.\n\n1. green label - you can fetch the **pwd** path.\n1. yellow label _(optional)_ - it appear inside Git or Svn folders.\n1. cyan label - you have the **username** @ **hostname**\n\n![](images/PS1.png)\n\n\n### Git integration\n\n_there are **no** changes on the active **master** branch_\n![](images/git--no-changes.png)\n\n_there are changes on the active **master** branch, but not committed yet_\n![](images/git--with-changes.png)\n\n_you have created a **new-branch**, but not pushed yet_\n![](images/git--new-branch-no-changes.png)\n\n_you have created and pushed a **new-branch**_\n![](images/git--new-branch-no-changes-pushed.png)\n\n_you have created a **new-branch** with some changes, but not committed and pushed yet_\n![](images/git--new-branch-with-changes.png)\n\n_you have pushed the **new-branch**, but it has other changes to commit_\n![](images/git--new-branch-with-changes-pushed.png)\n"
      }
    }
  },
  {
    "name": "numberun",
    "description": "NumbeRun is a puzzle game I developed in 2007 for my school-leaving examination. The game was developed in Microsoft Visual C# 2005 using the Microsoft XNA library.",
    "url": "https://github.com/marcomontalbano/numberun",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2016-08-16T06:28:27Z",
    "updatedAt": "2022-11-03T21:37:40Z",
    "pushedAt": "2022-11-03T21:40:27Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": true,
    "openGraphImageUrl": "https://repository-images.githubusercontent.com/65793496/473c562b-f186-44ed-8d1b-c17055543bc6",
    "stargazers": {
      "totalCount": 2
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "xna"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "csharp"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "game"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "microsoft-xna"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "pascal"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "c-plus-plus"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "numberun"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "puzzle-game"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "NumbeRun",
      "visible": true,
      "starCount": 2,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "xna",
        "csharp",
        "game",
        "microsoft-xna",
        "pascal",
        "c-plus-plus",
        "numberun",
        "puzzle-game"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/numberun/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/numberun/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/numberun/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/numberun/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "NumbeRun\n========\n\nNumbeRun is a puzzle game I developed in 2007 for my school-leaving examination. The game was developed in [Microsoft Visual C#](http://www.visualstudio.com/) 2005 using the [Microsoft XNA](https://it.wikipedia.org/wiki/Microsoft_XNA) library.\n\nhttps://user-images.githubusercontent.com/1681269/199839122-efc19341-57f6-4408-8eca-524b4940458a.mp4\n\n\nPlay Now\n--------\n\n[Download NumbeRun](https://github.com/marcomontalbano/numberun/releases/latest) and play now on Windows 10.\n\nBefore play, you need to install DirectX and XNA from `setup` folder.\n\n_system requirements:_\n\n- [Microsoft .NET Framework 2.0](http://www.microsoft.com/it-it/download/details.aspx?id=1639)\n- Microsoft XNA 1.0\n- Windows XP / 7 / 8 / 8.1 / 10\n\n\nScreenshots\n-----------\n\n![NumbeRun v2 - menu](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__menu.jpg) ![NumbeRun v2 - guide](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__guide.jpg) ![NumbeRun v2 - game1](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__game1.jpg) ![NumbeRun v2 - game2](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_2__game2.jpg)\n\n\nPlot\n----\n\nFiveRun has been trapped in the kingdom of DarkRun, an evil wizard who will do anything to prevent his escape.\n\nYou are the only one who can help FiveRun in his mission: leave DarkRun's lands stealing as much gold as he can. Mind though: these grounds are full of dangers! Pay attention to the GrumRuns (in the next release they will be renamed GrimRuns, 'cause I made a mistake), wicked creatures serving Lord DarkRun: they will haunt you and won't find their peace until they catch you.\n\nIn order to move from land to land, you need to find a magic door that you will be able to cross unscathed only if - that's for you to find out! :wink:\n\nNow you are ready to follow FiveRun in this adventure.\n\nOne last friendly piece of advice: FiveRun can't swim!\n\n\nOther versions\n--------------\n\nNumbeRun has been written in different programming languages during the years. The first version was in Pascal, then the game was re-written in C, then C++, then C++ with OpenGL and in the end in C# with Microsoft XNA.\n\nThe first release of the complete game was in C++ using a Windows Console, a big bidimensional matrix and **numbers as characters**, that's why the name is **NumbeRun** (numbers that run).\n\nIt was my very first project, the very first idea I worked on, just after starting high school. Every time I discovered a new language I took the chance to re-write it, so as to master the new knowledge. That's why there are so many versions of the same game. It evolved along with my competence.\n\n![NumbeRun v1 - menu](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__menu.jpg) ![NumbeRun v1 - game 1](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__game1.jpg) ![NumbeRun v1 - game 2](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__game2.jpg) ![NumbeRun v1 - game over](https://github.com/marcomontalbano/numberun/raw/master/docs/assets/numberun_1__gameover.jpg)\n\n\nOpen Source\n-----------\n\nOn GitHub you can find all versions. Feel free to download, build and play :)\n\nCheck out the repository for source codes and binary files.\n"
      }
    }
  },
  {
    "name": "kata.js",
    "description": "A collection of katas with JavaScript.",
    "url": "https://github.com/marcomontalbano/kata.js",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2016-03-25T08:26:30Z",
    "updatedAt": "2020-10-28T18:15:05Z",
    "pushedAt": "2020-10-28T18:15:02Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/ed8e099234890fefc087b5f3ad75f87d65591c59e6fdf274cbdae286fd7978f5/marcomontalbano/kata.js",
    "stargazers": {
      "totalCount": 1
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "kata"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "tdd"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "test"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "travis-ci"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "coverage"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "nyc"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "istanbul"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "github-actions"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jasmine"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "mocha"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "chai"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "sinon"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "stryker"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "Test-Driven Development with Mocha: How to",
      "visible": true,
      "starCount": 1,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "kata",
        "tdd",
        "test",
        "travis-ci",
        "coverage",
        "nyc",
        "istanbul",
        "github-actions",
        "jasmine",
        "mocha",
        "chai",
        "sinon",
        "stryker"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/kata.js/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/kata.js/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/kata.js/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/kata.js/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "[![Build Status](https://github.com/marcomontalbano/kata.js/workflows/Node%20CI/badge.svg)](https://github.com/marcomontalbano/kata.js)\r\n[![Build Status](https://travis-ci.org/marcomontalbano/kata.js.svg?branch=master)](https://travis-ci.org/marcomontalbano/kata.js)\r\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/kata.js/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/kata.js?branch=master)\r\n\r\n\r\nTest-Driven Development with Mocha: How to\r\n============================================\r\n\r\nA [code kata](https://en.wikipedia.org/wiki/Kata_(programming)) is an exercise in programming which helps a programmer hone their skills through practice and repetition.\r\n\r\nThe term was probably first coined by [Dave Thomas](https://en.wikipedia.org/wiki/Dave_Thomas_(programmer)), co-author of the book [The Pragmatic Programmer](https://en.wikipedia.org/wiki/The_Pragmatic_Programmer), in a bow to the Japanese concept of kata in the martial arts.\r\n\r\n\r\n## Katas\r\n\r\n* Sound Player\r\n* Hello World\r\n* FizzBuzz\r\n* Rock Paper Scissors\r\n* Primes\r\n\r\n\r\n## Setup\r\n\r\nAll project dependencies are installed and managed via npm, the [Node.js](http://nodejs.org) package manager.\r\n\r\n```sh\r\nnpm install\r\nnpm test\r\n```\r\n\r\nAlternatively you can use [Yarn](https://yarnpkg.com/lang/en/).\r\n\r\n```sh\r\nyarn\r\nyarn test\r\n```\r\n\r\n\r\n## Continuous Integration with travis-ci.org\r\n\r\n[Travis CI](https://travis-ci.org/) is a hosted, distributed continuous integration service used to build and test software projects hosted at GitHub.\r\n\r\nIn order to use Travis CI with your JavaScript projects you must use output on console instead of the html.\r\n\r\n* Click on `+` sign to add new repository.\r\n* Login with your Github credentials.\r\n* Select the repository.\r\n* Update your `package.json` adding:\r\n\r\n```json\r\n\"scripts\": {\r\n  \"test\": \"mocha ./**/*.spec.js\"\r\n},\r\n```\r\n\r\n* Add a `.travis.yml` file to your repository to tell Travis CI what to build:\r\n\r\n```yaml\r\nlanguage: node_js\r\nnode_js:\r\n  - \"12\"\r\n\r\n```\r\n\r\n* *note*: `npm install` and `npm test` are automatically executed by Travis CI.\r\n* Commit and push your changes.\r\n\r\nThat's it!\r\n\r\n\r\n## Test-driven development\r\n\r\nTest-driven development (TDD) is a software development process that relies on the repetition of a very short development cycle:\r\n\r\n* first the developer writes an (initially failing) automated test case that defines a desired improvement or new function.\r\n* then produces the minimum amount of code to pass that test.\r\n* finally refactors the new code to acceptable standards.\r\n\r\n### Toolkit\r\n\r\n[Mocha](https://mochajs.org/) is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.\r\n\r\n[Chai](https://www.chaijs.com/) is a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.\r\n\r\n[Sinon](https://sinonjs.org/) is a standalone test spies, stubs and mocks for JavaScript. Works with any unit testing framework.\r\n\r\n[Istanbul](https://istanbul.js.org/) instruments your ES5 and ES2015+ JavaScript code with line counters, so that you can track how well your unit-tests exercise your codebase.\r\nThe [nyc](https://github.com/istanbuljs/nyc) command-line-client for Istanbul works well with most JavaScript testing frameworks: tap, mocha, AVA, etc.\r\n\r\n[Stryker](https://stryker-mutator.io/) uses one design mentality to implement mutation testing. It's easy to use and fast to run. Stryker will only mutate your source code, making sure there are no false positives.\r\n\r\n### Example\r\n\r\nFollowing an example of Test-Driven Development using Mocha and Chai for the most famous application: **`Hello World`**!\r\n\r\nSetup is easy, just run an `npm` command and change few lines into your `package.json`.\r\n\r\n```sh\r\nnpm install -D mocha chai\r\n```\r\n\r\n```json\r\n\"scripts\": {\r\n  \"test\": \"mocha ./**/*.spec.js\"\r\n},\r\n```\r\n\r\nNow you are able to run unit tests with `npm test`.\r\n\r\n> If you want to use ES6 syntax with import/export you will need `babel` also. To understand more about it, you can checkout this project, I'm using it :smile:\r\n\r\nFirst of all we should create a new file `HelloWorld.spec.js`.\r\n\r\nNow we can start writing our first test.\r\n\r\n```js\r\n//- HelloWorldSpec.js\r\n\r\nconst expect = require('chai').expect;\r\nconst HelloWorld = require('./HelloWorld');\r\n\r\ndescribe('HelloWorld', () => {\r\n  it('should exist.', () => {\r\n    // given\r\n    new HelloWorld();\r\n  });\r\n});\r\n\r\n```\r\n:exclamation: **RED** - Try running test and it will fail.\r\n\r\n---\r\n\r\nCreate a new file `HelloWorld.js`.\r\n\r\nThe next step is writing some code that would cause the test to pass.\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nfunction HelloWorld() {\r\n}\r\n\r\nmodule.exports = HelloWorld;\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n---\r\n\r\n:grey_question: **Need for refactoring?**\r\n\r\n---\r\n\r\nWe have a green bar! Now we can write a new test.\r\n\r\n```js\r\n//- HelloWorld.spec.js\r\n\r\n...\r\n\r\n  it('should greet() correcly.', () => {\r\n    // given\r\n    const helloWorld = new HelloWorld();\r\n\r\n    // then\r\n    expect(helloWorld.greet()).to.equal('Hello world');\r\n  });\r\n\r\n...\r\n```\r\n\r\n:exclamation: **RED** - Try running test and it will fail.\r\n\r\n---\r\n\r\nNow we can write some code that would cause the test to pass.\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\n...\r\n\r\nHelloWorld.prototype.greet = function () {\r\n  return 'Hello world';\r\n};\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n---\r\n\r\n:grey_question: **Need for refactoring?**\r\n\r\n---\r\n\r\n:tada: **Done**\r\n\r\n---\r\n\r\n**SPEC** - HelloWorld.spec.js\r\n\r\n```js\r\n//- HelloWorld.spec.js\r\n\r\nconst expect = require('chai').expect;\r\nconst HelloWorld = require('./HelloWorld');\r\n\r\ndescribe('HelloWorld', () => {\r\n\r\n  it('should exist.', () => {\r\n    // given\r\n    new HelloWorld();\r\n  });\r\n\r\n  it('should greet() correcly.', () => {\r\n    // given\r\n    const helloWorld = new HelloWorld();\r\n\r\n    // then\r\n    expect(helloWorld.greet()).to.equal('Hello world');\r\n  });\r\n\r\n});\r\n```\r\n\r\n**SRC** - HelloWorld.js\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nfunction HelloWorld() {\r\n}\r\n\r\nHelloWorld.prototype.greet = function () {\r\n  return 'Hello world';\r\n};\r\n\r\nmodule.exports = HelloWorld;\r\n```\r\n\r\n---\r\n\r\nNow if we decide to refactor the application moving from `prototype` to `class`, we can do it without fear.\r\n\r\nSo, let's do this :sunglasses:\r\n\r\n```js\r\n//- HelloWorld.js\r\n\r\nmodule.exports = class {\r\n  greet() {\r\n    return 'Hello world';\r\n  }\r\n}\r\n```\r\n\r\n:green_heart: **GREEN** - Try running test and it will pass.\r\n\r\n\r\n## Further readings\r\n\r\n* [Test Driven Development: By Example](https://www.amazon.it/gp/product/0321146530/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=0321146530&linkId=1ca1dd6ac49f36bde8d8873e0c219592) (Kent Beck) - Addison-Wesley\r\n* [JavaScript Testing with Jasmine](https://www.amazon.it/gp/product/B00C10Y9BS/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=B00C10Y9BS&linkId=09b0ff07e7fdfff34479e6b75c6c0de6) (Evan Hahn) - O'Reilly Media\r\n* [Jasmine JavaScript Testing](https://www.amazon.it/gp/product/B00ESX15MW/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=B00ESX15MW&linkId=56d03cf6deae504b4eef80075e3be7fb) (Paulo Ragonha) - Packt Publishing\r\n* [JavaScript Unit Testing](https://www.amazon.it/gp/product/1782160620/ref=as_li_tl?ie=UTF8&tag=marcomontalba-21&camp=3414&creative=21718&linkCode=as2&creativeASIN=1782160620&linkId=9389d2655483038a950339ca11a7035c) (Hazem Saleh) - Packt Publishing\r\n"
      }
    }
  },
  {
    "name": "jquery-jcreate",
    "description": "jCreate is a new special event for jQuery. Just use .on('create', ..); the callback will be triggered when elements are created on the page.",
    "url": "https://github.com/marcomontalbano/jquery-jcreate",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2016-03-10T13:08:21Z",
    "updatedAt": "2022-10-28T13:47:55Z",
    "pushedAt": "2022-02-17T11:53:17Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/e62e809887f7506355539dcd56caee0ee65965467bb484e4197dc0e3bf55f2c4/marcomontalbano/jquery-jcreate",
    "stargazers": {
      "totalCount": 12
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "oncreate"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jquery"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "create"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "event"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "jasmine"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "unit-testing"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "jCreate",
      "visible": true,
      "starCount": 12,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "oncreate",
        "jquery",
        "create",
        "event",
        "jasmine",
        "unit-testing"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/jquery-jcreate/raw/master/cover.png",
        "url": "https://raw.githubusercontent.com/marcomontalbano/jquery-jcreate/master/cover.png",
        "isPresent": true,
        "headers": {
          "content-type": "image/png"
        }
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/jquery-jcreate/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/jquery-jcreate/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "# jCreate\r\n\r\n[![Build Status](https://travis-ci.org/marcomontalbano/jquery-jcreate.svg?branch=master)](https://travis-ci.org/marcomontalbano/jquery-jcreate)\r\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/jquery-jcreate/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/jquery-jcreate?branch=master)\r\n[![Release Notes](https://img.shields.io/github/release/marcomontalbano/jquery-jcreate.svg)](https://github.com/marcomontalbano/jquery-jcreate/releases)\r\n\r\njCreate is a plugin for jQuery that adds a new bindable event. Did you ever look for something like `$(document).on(\"create\", function() { ... });`?\r\n\r\nNow you can do something cool when one or more elements are created and are available on the page.\r\n\r\nSee it in action with [CodePen].\r\n\r\n\r\n## Install\r\n\r\n### Yarn and npm\r\n\r\n[![NPM](https://nodei.co/npm/jquery-jcreate.png)](https://nodei.co/npm/jquery-jcreate/)\r\n\r\nYou can install jCreate using [Yarn] or [npm]:\r\n\r\n```sh\r\n# yarn\r\nyarn add jquery-jcreate\r\n\r\n# npm\r\nnpm install --save jquery-jcreate\r\n```\r\n\r\n#### Webpack 2\r\n\r\n```js\r\nimport $ from 'jquery';\r\nimport 'jquery-jcreate';\r\n\r\n$(document).on('create', '*', function(event) {\r\n    console.log( 'created tag: ', event.$currentTarget.prop('tagName') );\r\n});\r\n```\r\n\r\n#### RequireJS\r\n\r\n```js\r\ndefine([\"jquery\", \"jquery-jcreate\"], function( $ ) {\r\n\r\n    $(document).on('create', '*', function(event) {\r\n        console.log( 'created tag: ', event.$currentTarget.prop('tagName') );\r\n    });\r\n});\r\n```\r\n\r\n### Bower\r\n\r\nYou can install jCreate using [Bower]:\r\n\r\n```sh\r\nbower install --save jquery-jcreate\r\n```\r\n\r\nAnd now you can include it in you project with a `<script>` tag.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"https://github.com/marcomontalbano/jquery-jcreate/raw/master/jquery.jcreate.min.js\"></script>\r\n```\r\n\r\n### `<script>` tag using CDNs\r\n\r\n[jsDelivr] is a global CDN delivery for JavaScript libraries.\r\n\r\nTo include the latest releases and all upcoming features and patches, use this:\r\n\r\n```html\r\n<script src=\"https://cdn.jsdelivr.net/npm/jquery-jcreate@1/dist/jquery.jcreate.min.js\"></script>\r\n```\r\n\r\n## How to use\r\n\r\njCreate works with the [jQuery Event Delegation].\r\n\r\n```js\r\n// bind 'create' event.\r\n$( '#dataTable tbody' ).on( 'create', 'tr', function( event ) {\r\n    console.log( event.$currentTarget.text() );\r\n});\r\n\r\n// add a new 'row'.\r\n$( '#dataTable tbody' ).append('<tr><td>this is a new row!</td></tr>');\r\n```\r\n\r\n### Event\r\n\r\n* **type** - Describes the nature of the event.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.type ); //= \"create\"\r\n});\r\n```\r\n\r\n* **timeStamp** - The difference in milliseconds between the time the browser created the event and January 1, 1970.\r\n\r\n* **currentTarget** - The current DOM element within the event bubbling phase.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.currentTarget === this ); //= true\r\n});\r\n```\r\n\r\n* **$currentTarget** - The current DOM element within the event bubbling phase as jQuery object.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.$currentTarget.is( $(this) ) ); //= true\r\n});\r\n```\r\n\r\n* **delegateTarget** - The element where the currently-called jQuery event handler was attached.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.delegateTarget === document ); //= true\r\n});\r\n```\r\n\r\n* **$delegateTarget** - The jQuery element where the currently-called jQuery event handler was attached.\r\n```javascript\r\n$( document ).on('create', 'a', function( event ) {\r\n    console.log( event.$delegateTarget.is( $(document) ) ); //= true\r\n});\r\n```\r\n\r\n* **options** - Method that filters data by key.\r\n```html\r\n<div data-component-name=\"hello-world\"></div>\r\n```\r\n```javascript\r\n$( document ).on('create', 'div', function( event ) {\r\n    console.log( event.options('component') ); //= {name:\"hello-world\"}\r\n});\r\n```\r\n\r\n### jQuery Support\r\n\r\n> jquery >= 1.8\r\n\r\nSince I use the last version of `jasmine-jquery` library in order to test my own plugin, I cannot ensure that the plugin works with jQuery 1.7 and below, due to the fact that `jasmine-jquery` uses methods that were introduced in jQuery 1.8.\r\n\r\n\r\n## The Module Pattern\r\n\r\n> _Modules are an integral piece of any robust application's architecture and typically help in keeping the units of code for a project both cleanly separated and organized._\r\n>\r\n> [Learning JavaScript Design Patterns - Addy Osmani]\r\n\r\n```javascript\r\nvar myModule = (function () {\r\n\r\n    var   module           = {}\r\n        , _privateVariable = 'Hello World'\r\n    ;\r\n\r\n    var _privateMethod = function() {\r\n        return _privateVariable;\r\n    };\r\n\r\n    module.publicProperty = 'Foobar';\r\n    module.publicMethod = function () {\r\n        console.log( _privateMethod() );\r\n    };\r\n\r\n    return module;\r\n\r\n}());\r\n```\r\n\r\nHere follows a simple example on how to use the Module pattern with jCreate.\r\n\r\n```html\r\n<div data-component=\"hello-world\" data-hello-world-name=\"Marco\"></div>\r\n```\r\n\r\n```javascript\r\nvar helloWorldComponent = (function () {\r\n\r\n    var   module         = {}\r\n        , _componentName = 'hello-world'\r\n    ;\r\n\r\n    module.greeting = function( name ) {\r\n        console.log( 'Hello ' + name + '!' );\r\n    };\r\n\r\n    $(document).on('create', '[data-component~=\"' + _componentName + '\"]', function( event ) {\r\n        var options = event.options( _componentName ); //= {name:\"Marco\"}\r\n        module.greeting( options.name );               //= Hello Marco!\r\n    });\r\n\r\n    return module;\r\n}());\r\n\r\nhelloWorldComponent.greeting('Marco'); //= Hello Marco!\r\n```\r\n\r\n\r\n## Development\r\n\r\n### Install Grunt and Bower\r\n\r\nTo install Grunt and Bower, you must first download and install [node.js] - which includes npm.\r\n\r\nThen, using the command line:\r\n\r\n```sh\r\n# install `grunt-cli` globally\r\nnpm install -g grunt-cli\r\n\r\n# install `bower` globally\r\nnpm install -g bower\r\n\r\n# navigate to the root of your project, then run\r\nnpm install\r\nbower install\r\n```\r\n\r\n\r\n### Available tasks\r\n\r\n* `npm start`  Start http server.\r\n* `npm run test`   Validate files with [JSHint] and run unit tests with [jasmine].\r\n* `npm run smoke`  Watch for file changes and run smoke test.\r\n* `npm run build`  Run full test suite and build dist folder.\r\n\r\n\r\n[Bower]: <http://bower.io/>\r\n[jsDelivr]: <https://www.jsdelivr.com/about>\r\n[jQuery Event Delegation]: <http://api.jquery.com/on/#direct-and-delegated-events>\r\n[node.js]: <https://nodejs.org/>\r\n[CodePen]: <https://codepen.io/collection/AQGNYy/>\r\n[download and install node.js]: <https://nodejs.org/>\r\n\r\n[Learning JavaScript Design Patterns - Addy Osmani]: <https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript>\r\n\r\n[JSHint]:   <https://www.npmjs.com/package/grunt-contrib-jshint>\r\n[jasmine]:  <https://www.npmjs.com/package/grunt-contrib-jasmine>\r\n[UglifyJS]: <https://www.npmjs.com/package/grunt-contrib-uglify>\r\n\r\n[npm]: <https://www.npmjs.com/>\r\n[Yarn]: <https://yarnpkg.com/lang/en/>\r\n"
      }
    }
  },
  {
    "name": "kata.rb",
    "description": "A collection of katas with Ruby.",
    "url": "https://github.com/marcomontalbano/kata.rb",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": "",
    "createdAt": "2016-02-03T17:58:34Z",
    "updatedAt": "2020-03-04T21:10:06Z",
    "pushedAt": "2020-03-04T21:10:03Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/71c77a9559b60b75012395b10ff30b17a06bca390ec47fbe59ae16b5f42766ac/marcomontalbano/kata.rb",
    "stargazers": {
      "totalCount": 0
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": [
        {
          "node": {
            "topic": {
              "name": "ruby"
            }
          }
        },
        {
          "node": {
            "topic": {
              "name": "kata"
            }
          }
        }
      ]
    },
    "customFields": {
      "title": "TOC",
      "visible": false,
      "starCount": 0,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [
        "ruby",
        "kata"
      ],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/kata.rb/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/kata.rb/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/kata.rb/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/kata.rb/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "[![Build Status](https://travis-ci.org/marcomontalbano/kata.rb.svg?branch=master)](https://travis-ci.org/marcomontalbano/kata.rb)\n\n\nTOC\n===\n\n* Ruby Tip & Tricks\n* FizzBuzz\n* Bowling\n\n\nHow to configure\n----------------\n\nMake sure you have the latest RVM:\n\n`rvm get stable`\n\nJust run this in your favorite terminal after installing RVM:\n\n`rvm install ruby-2.4`\n\nCreate a new gemset and use it:\n\n`rvm use @tdd --create`\n\nGet gemset list:\n\n`rvm gemset list`\n\nInstall bundler:\n\n`gem install bundler`\n\nInstall gems:\n\n`bundle install`\n\nExecute tasks:\n\n`bundle exec rake`\n\n\nHow to test\n-----------\n\n`rspec spec`\n\n\nHow to play\n-----------\n\n`ruby main.rb`\n"
      }
    }
  },
  {
    "name": "hb-ejs",
    "description": "A Harp Boilerplate.",
    "url": "https://github.com/marcomontalbano/hb-ejs",
    "defaultBranchRef": {
      "name": "master"
    },
    "homepageUrl": null,
    "createdAt": "2015-10-29T13:23:15Z",
    "updatedAt": "2018-04-09T17:38:53Z",
    "pushedAt": "2016-10-06T08:35:35Z",
    "isFork": false,
    "isLocked": false,
    "isMirror": false,
    "isPrivate": false,
    "isArchived": false,
    "isDisabled": false,
    "isTemplate": false,
    "usesCustomOpenGraphImage": false,
    "openGraphImageUrl": "https://opengraph.githubassets.com/274c0709de1eeb0a4cd8fcaea2779b2a08016b7aef9a659d89e11509f752c755/marcomontalbano/hb-ejs",
    "stargazers": {
      "totalCount": 3
    },
    "forkCount": 0,
    "repositoryTopics": {
      "edges": []
    },
    "customFields": {
      "title": "Harp Boilerplate • ejs",
      "visible": false,
      "starCount": 3,
      "forkCount": 0,
      "defaultBranch": "master",
      "repositoryTopics": [],
      "cover": {
        "originalUrl": "https://github.com/marcomontalbano/hb-ejs/raw/master/cover.png",
        "url": "https://github.com/marcomontalbano/hb-ejs/raw/master/cover.png",
        "isPresent": false
      },
      "readme": {
        "originalUrl": "https://github.com/marcomontalbano/hb-ejs/raw/master/README.md",
        "url": "https://raw.githubusercontent.com/marcomontalbano/hb-ejs/master/README.md",
        "isPresent": true,
        "headers": {
          "content-type": "text/plain; charset=utf-8"
        },
        "source": "Harp Boilerplate • ejs\n======================\n\nA Harp boilerplate that uses `.ejs` instead of `.jade`.\n\nIt also include a test suite with Jasmine.\n\n\nGet started\n-----------\n\nHarp is the static web server with built-in preprocessing. [Get started with Harp](http://harpjs.com/docs/quick-start).\n\n```sh\n# install harp\nsudo npm install -g harp\n\n# then initialize the boilerplate\nharp init -b marcomontalbano/hb-ejs myproject\n\n# run server\nharp server myproject\n```\n\nNow visit [localhost:9000](http://localhost:9000) in your browser.\n\n\n\nFull installation\n-----------------\n\n```sh\n# install needed packages\nsudo npm install -g harp\n#sudo npm install -g bower\nsudo npm install -g gulp\n\n# then initialize the boilerplate\nharp init -b marcomontalbano/hb-ejs myproject\ncd myproject\n\n# install dependencies\nnpm install\n#bower install\n\n# run tests\ngulp test\n\n# run server\nharp server\n\n```\n\n\nFurther Reading\n---------------\n\n### Node.js\n\nNode.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.\nNode.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient.\nNode.js' package ecosystem, npm, is the largest ecosystem of open source libraries in the world.\n\nNode.js can be downloaded for Windows, Mac and Linux at [nodejs.org/en/download/](https://nodejs.org/en/download/).\n\n> [nodejs.org](https://nodejs.org/)\n\n### Bower\n\n**At the moment Bower doesn't work with the command `harp compile`. Do not use it.**\n\nWeb sites are made of lots of things — frameworks, libraries, assets, utilities, and rainbows. Bower manages all these things for you.\n\n> [bower.io](http://bower.io/)\n\n##### Getting started with Bower\n\n```sh\nsudo npm install -g bower\n```\n\nBower is useful to load 3rd party libraries like jQuery, AngularJS and every other frontend frameworks.\n\n`jQuery` and `uikit` are imported in this boilerplate just for the demo.\nYou are free to use your prefered framework changing the configuration in `bower.json`.\n\nAfter done it just run:\n\n```sh\nbower install\n```\n\n### gulp.js\n\nGulp is a task runner which uses Node.js.\n\nI have chosen `gulp` instead of `Grunt`. Some reasons are clearly explained [here](http://slides.com/contra/gulp#).\n\n> [gulpjs.com](http://gulpjs.com/)\n\n##### Getting started with gulp.js\n\nGulp is used in this boilerplate for testing reasons.\n\nIf you don't want to test your javascript code (you should do it), just do not install it.\n\n```sh\nsudo npm install -g gulp\n\ngulp test\n```\n\n\nLicense\n-------\n\n[The MIT License (MIT)](https://github.com/marcomontalbano/hb-ejs/blob/master/LICENSE.md)\n\nCopyright © [Marco Montalbano](https://marcomontalbano.com)\n"
      }
    }
  }
]