{"componentChunkName":"component---src-templates-project-tsx","path":"/project/wasm-vs-js-benchmark","result":{"pageContext":{"name":"wasm-vs-js-benchmark","homepageUrl":"https://marcomontalbano.github.io/wasm-vs-js-benchmark","url":"https://github.com/marcomontalbano/wasm-vs-js-benchmark","title":"WebAssembly vs Javascript","cover":"https://raw.githubusercontent.com/marcomontalbano/wasm-vs-js-benchmark/master/cover.png","readme":"# WebAssembly vs Javascript\n\n[![Build Status](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark.svg?branch=master)](https://travis-ci.org/marcomontalbano/wasm-vs-js-benchmark)\n[![Dependabot Status](https://api.dependabot.com/badges/status?host=github&repo=marcomontalbano/wasm-vs-js-benchmark)](https://dependabot.com)\n\n*A comparison between WebAssembly and Javascript made for ~~studying~~ fun.*\n\n## What's in the box\n\n- WebAssembly with Rust\n- Benchmark with fancy charts\n- Web Workers to avoid a frozen main thread\n- Build and deploy with Travis CI\n\n## Rust and WebAssembly\n\nThere are two books that fully cover this section:\n\n- https://doc.rust-lang.org/book\n- https://rustwasm.github.io/book\n\nIn this project I'm also using [`wasm-bingen`](https://rustwasm.github.io/wasm-bindgen) and [`wasm-pack`](https://github.com/rustwasm/wasm-pack).\n\n## Project\n\n### Folder Structure\n\nSource code is splitted into two main folders: `src` that contains our Rust application and `src-js` that contains our Javascript application.\n\nI tried to make their folder structure as similar as possible:\n\n```sh\nsrc\n├── libs\n│   ├── mod.rs\n│   ├── ...\n│   └── primes.rs\n└── main.rs\n\nsrc-js\n├── libs\n│   ├── mod.js\n│   ├── ...\n│   └── primes.js\n├── ...\n├── bootstrap.js\n└── main.js\n```\n\n**`*/libs/mod.*`** is the entry point for declaring all modules. The `.rs` version of this file will be compiled to `.wasm`.\n\n**`*/libs/primes.*`** is a module example, written both in Rust and Javascript.\n\n**`*/main.*`** is the entry point for the application. The `.rs` file is the one used by `cargo run` command. The `.js` file is the one used by webpack.\n\n**`./src-js/bootstrap.js`** is the bootstrap file for the web application that loads the `main.js` file asynchronously.\n\n\n### Rust\n\nThe first step is to [install Rust](https://doc.rust-lang.org/stable/book/ch01-01-installation.html). We’ll download Rust through `rustup`, a command line tool for managing Rust versions and associated tools.\n\nRunnig following command we'll install Rust and [Cargo](https://doc.rust-lang.org/cargo) automatically.\nYou will also need to install [wasm-pack](https://rustwasm.github.io/wasm-pack/installer/).\n\n```sh\n$ curl https://sh.rustup.rs -sSf | sh\n\n# install `wasm-pack`\n$ curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n\n# update dependencies\n$ cargo update\n```\n\nNow we are able to use the following commands from our project folder.\n\n```sh\n# test .rs files\n$ cargo test\n\n# compile `src/main.rs`\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s)\n\n# or compile `src/main.rs` with optimizations\n$ cargo build --release\n    Finished release [optimized] target(s)\n```\n\nNow that we have built our code, we can run it:\n\n```sh\n$ ./target/release/wasm-vs-js-benchmark primes-get_primes 11\n```\n\nWe can also use `cargo run` to compile and then run it, all in one step:\n\n```sh\n$ cargo run primes-get_primes 11\n\n# compile and run our project with optimizations\n$ cargo run --release primes-get_primes 11\n```\n\nLast but not least, we'll compile our project to `.wasm`:\n\n```sh\n$ wasm-pack build\n```\n\nNow we are able to use the content of `./pkg` folder for our web application.\n\n\n### Javascript\n\nThe goal of this project is benchmarking WebAssembly and Javascript. Some task will use big computations that takes time to execute.\n\n[`Web Workers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) makes it possible to run a script operation in a background thread separate from the main execution thread of a web application.\n\nThe web application is bundled with [`Webpack`](https://webpack.js.org/).\n\nRun following command to start it:\n\n```sh\n$ npm run build:wasm\n$ npm start\n```\n\nProject is running at http://localhost:8080/\n\n\n### Unit Test\n\nYou can run unit test for Rust and Javascript, simply running `npm test`.\n\nI use `mocha` for javascript unit test, transpiling ES6 with `@babel/core`, `@babel/preset-env` and `@babel/register`.\n\n\n## Benchmark\n\n### Rust to Native Code\n\nThe execution time of .wasm binaries is just a bit slower than the execution of same native code.\n\nFor benchmarking the native code, I use [Hyperfine](https://github.com/sharkdp/hyperfine).\n\nThese benchmarks are recorded on a MacBook Pro (15-inch, 2016) having these specs:\n\n- macOS Mojave\n- 2,6 GHz Intel Core i7 (4 cores)\n- 16 GB 2133 MHz LPDDR3\n\n```sh\n$ cargo build --release\n\n$ hyperfine --warmup 3 --export-markdown BENCHMARK.md \\\n    './target/release/wasm-vs-js-benchmark primes-get_primes 100000' \\\n    './target/release/wasm-vs-js-benchmark matrix-multiply 500 500'\n```\n\n| Command | Mean [s] | Min…Max [s] |\n|:---|---:|---:|\n| `./target/release/wasm-vs-js-benchmark primes-get_primes 100000` | 1.211 ± 0.018 | 1.196…1.255 |\n| `./target/release/wasm-vs-js-benchmark matrix-multiply 500 500` | 0.435 ± 0.016 | 0.417…0.469 |\n\n\n### WebAssembly vs Javascript\n\nhttps://marcomontalbano.github.io/wasm-vs-js-benchmark\n\n\n## Useful Links\n\n- https://webassembly.org/\n\n- https://doc.rust-lang.org/book\n- https://doc.rust-lang.org/rust-by-example\n\n- https://developer.mozilla.org/en-US/docs/WebAssembly\n- https://developer.mozilla.org/en-US/docs/WebAssembly/rust_to_wasm\n\n- https://rustwasm.github.io/book\n- https://rustwasm.github.io/wasm-bindgen\n\n- https://github.com/rustwasm/create-wasm-app\n- https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers\n- https://blog.logrocket.com/webassembly-how-and-why-559b7f96cd71\n\n"}},"staticQueryHashes":["3649515864","63159454"]}