{"componentChunkName":"component---src-templates-project-tsx","path":"/project/html-miner","result":{"pageContext":{"name":"html-miner","homepageUrl":"https://marcomontalbano.github.io/html-miner","url":"https://github.com/marcomontalbano/html-miner","title":"HTML Miner","cover":"https://raw.githubusercontent.com/marcomontalbano/html-miner/master/cover.png","readme":"HTML Miner\n==========\n\n[![Npm](https://img.shields.io/npm/v/html-miner.svg)](https://www.npmjs.com/package/html-miner)\n[![Build Status](https://travis-ci.org/marcomontalbano/html-miner.svg?branch=master)](https://travis-ci.org/marcomontalbano/html-miner)\n[![Coverage Status](https://coveralls.io/repos/github/marcomontalbano/html-miner/badge.svg?branch=master)](https://coveralls.io/github/marcomontalbano/html-miner?branch=master)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/b9430880d9994818b4e32d5ba024ba5c)](https://www.codacy.com/app/marcomontalbano/html-miner?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=marcomontalbano/html-miner&amp;utm_campaign=Badge_Grade)\n[![Code Climate](https://codeclimate.com/github/marcomontalbano/html-miner/badges/gpa.svg)](https://codeclimate.com/github/marcomontalbano/html-miner)\n[![Issue Count](https://codeclimate.com/github/marcomontalbano/html-miner/badges/issue_count.svg)](https://codeclimate.com/github/marcomontalbano/html-miner/issues)\n\nA powerful miner that will scrape html pages for you.\n\n## Install\n\n[![NPM](https://nodei.co/npm/html-miner.png)](https://nodei.co/npm/html-miner/)\n\n```sh\n# using npm\nnpm i --save html-miner\n\n# using yarn\nyarn add html-miner\n```\n\n## Example\n\nI decided to collect common use cases inside a dedicated [EXAMPLE.md](https://github.com/marcomontalbano/html-miner/blob/master/EXAMPLE.md). Feel free to start from **Usage** section or jump directly to **Example** page.\n\nIf you want to experiment, an [online playground](https://marcomontalbano.github.io/html-miner) is also available.\n\n\n:green_book: Enjoy your reading\n\n## Usage\n\n### Arguments\n\n`html-miner` accepts two arguments: `html` and `selector`.\n\n```js\nconst htmlMiner = require('html-miner');\n\n// htmlMiner(html, selector);\n```\n\n#### HTML\n\n_html_ is a string and contains `html` code.\n\n```js\nlet html = '<div class=\"title\">Hello <span>Marco</span>!</div>';\n```\n\n#### SELECTOR\n\n_selector_ could be:\n\n`STRING`\n\n```js\nhtmlMiner(html, '.title');\n//=> Hello Marco!\n```\n\nIf the selector extracts more elements, the result is an array:\n\n```js\nlet htmlWithDivs = '<div>Element 1</div><div>Element 2</div>';\nhtmlMiner(htmlWithDivs, 'div');\n//=> ['Element 1', 'Element 2']\n```\n\n`FUNCTION`\n\nRead [function in detail](#function-in-detail) paragraph.\n\n```js\nhtmlMiner(html, () => 'Hello everyone!');\n//=> Hello everyone!\n\nhtmlMiner(html, function () {\n    return 'Hello everyone!'\n});\n//=> Hello everyone!\n```\n\n`ARRAY`\n\n```js\nhtmlMiner(html, ['.title', 'span']);\n//=> ['Hello Marco!', 'Marco']\n```\n\n`OBJECT`\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: 'span'\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco'\n//   }\n```\n\nYou can combine `array` and `object` with each other or with string and functions.\n\n```js\nhtmlMiner(html, {\n    title: '.title',\n    who: '.title span',\n    upper: (arg) => { return arg.scopeData.who.toUpperCase(); }\n});\n//=> {\n//     title: 'Hello Marco!',\n//     who: 'Marco',\n//     upper: 'MARCO'\n//   }\n```\n\n\n### Function in detail\n\nA `function` accepts only one argument that is an `object` containing:\n\n- `$`: is a jQuery-like function pointing to the document ( html argument ). You can use it to query and fetch elements from the html.\n\n    ```js\n    htmlMiner(html, arg => arg.$('.title').text());\n    //=> Hello Marco!\n    ```\n\n- `$scope`: useful when combined with `_each_` or `_container_` (read [special keys](#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: 'span',\n            value: (arg) => {\n                // \"arg.$scope.find('.title')\" doesn't exist.\n                return arg.$scope.text();\n            }\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         value: 'Marco'\n    //     }]\n    //   }\n    ```\n\n- `globalData`: is an object that contains all **previously** fetched datas.\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        spanList: {\n            _each_: '.title span',\n            pageTitle: function(arg) {\n                // \"arg.globalData.who\" is undefined because defined later.\n                return arg.globalData.title;\n            }\n        },\n        who: '.title span'\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     spanList: [{\n    //         pageTitle: 'Hello Marco!'\n    //     }],\n    //     who: 'Marco'\n    //   }\n    ```\n\n- `scopeData`: similar to `globalData`, but only contains scope data. Useful when combined with `_each_` (read [special keys](#special-keys) paragraph).\n\n    ```js\n    htmlMiner(html, {\n        title: '.title',\n        upper: (arg) => { return arg.scopeData.title.toUpperCase(); },\n        sublist: {\n            who: '.title span',\n            upper: (arg) => {\n                // \"arg.scopeData.title\" is undefined because \"title\" is out of scope.\n                return arg.scopeData.who.toUpperCase();\n            },\n        }\n    });\n    //=> {\n    //     title: 'Hello Marco!',\n    //     upper: 'HELLO MARCO!',\n    //     sublist: {\n    //         who: 'Marco',\n    //         upper: 'MARCO'\n    //     }\n    //   }\n    ```\n\n\n### Special keys\n\nWhen selector is an `object`, you can use _special keys_: \n\n- `_each_`: creates a list of items. HTML Miner will iterate for the value and will parse siblings keys.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_eachId_`: useful when combined with `_each_`. Instead of creating an Array, it creates an Object where keys are the result of `_eachId_` function.\n\n    ```js\n    {\n        articles: {\n            _each_: '.articles .article',\n            _eachId_: function(arg) {\n                return arg.$scope.data('id');\n            }\n            title: 'h2',\n            content: 'p',\n        }\n    }\n    ```\n\n- `_container_`: uses the parsed value as container. HTML Miner will parse siblings keys, searching them inside the _container_.\n\n    ```js\n    {\n        footer: {\n            _container_: 'footer',\n            copyright: (arg) => { return arg.$scope.text().trim(); },\n            company: 'span' // find only 'span' inside 'footer'.\n        }\n    }\n    ```\n\nFor more details see the following [example](#lets-try-this-out).\n\n\n## Let's try this out\n\nConsider the following html snippet: we will try and fetch some information.\n\n```html\n<h1>Hello, <span>world</span>!</h1>\n<div class=\"articles\">\n    <div class=\"article\" data-id=\"a001\">\n        <h2>Heading 1</h2>\n        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n    <div class=\"article\" data-id=\"a002\">\n        <h2>Heading 2</h2>\n        <p>Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.</p>\n    </div>\n    <div class=\"article\" data-id=\"a003\">\n        <h2>Heading 3</h2>\n        <p>Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.</p>\n    </div>\n</div>\n<footer>\n    <p>&copy; <span>Company</span> 2017</p>\n</footer>\n```\n\n```js\nconst htmlMiner = require('html-miner');\n\nlet json = htmlMiner(html, {\n    title: 'h1',\n    who: 'h1 span',\n    h2: 'h2',\n    articlesArray: {\n        _each_: '.articles .article',\n        title: 'h2',\n        content: 'p',\n    },\n    articlesObject: {\n        _each_: '.articles .article',\n        _eachId_: function(arg) {\n            return arg.$scope.data('id');\n        },\n        title: 'h2',\n        content: 'p',\n    },\n    footer: {\n        _container_: 'footer',\n        copyright: (arg) => { return arg.$scope.text().trim(); },\n        company: 'span',\n        year: (arg) => { return arg.scopeData.copyright.match(/[0-9]+/)[0]; },\n    },\n    greet: () => { return 'Hi!'; }\n});\n\nconsole.log( json );\n\n//=> {\n//     title: 'Hello, world!',\n//     who: 'world',\n//     h2: ['Heading 1', 'Heading 2', 'Heading 3'],\n//     articlesArray: [\n//         {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     ],\n//     articlesObject: {\n//         'a001': {\n//             title: 'Heading 1',\n//             content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',\n//         },\n//         'a002': {\n//             title: 'Heading 2',\n//             content: 'Donec maximus ipsum quis est tempor, sit amet laoreet libero bibendum.',\n//         },\n//         'a003': {\n//             title: 'Heading 3',\n//             content: 'Suspendisse viverra convallis risus, vitae molestie est tincidunt eget.',\n//         }\n//     },\n//     footer: {\n//         copyright: 'Â© Company 2017',\n//         company: 'Company',\n//         year: '2017'\n//     },\n//     greet: 'Hi!'\n//   }\n\n```\n\nYou can find other examples under the folder `/examples`\n```sh\n# you can test examples with nodejs\nnode examples/demo.js\nnode examples/site.js\n```\n\n\n## Development\n\n```sh\nnpm install\nnpm test\n\n# start the playground locally\nnpm start\n```\n"}},"staticQueryHashes":["3649515864","63159454"]}